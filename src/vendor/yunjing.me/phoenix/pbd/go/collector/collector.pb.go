// Code generated by protoc-gen-go.
// source: collector.proto
// DO NOT EDIT!

/*
Package collector is a generated protocol buffer package.

It is generated from these files:
	collector.proto

It has these top-level messages:
	Arg
	Record
*/
package collector

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Arg struct {
	// Types that are valid to be assigned to T:
	//	*Arg_I32
	//	*Arg_I64
	//	*Arg_F32
	//	*Arg_F64
	//	*Arg_B
	//	*Arg_S
	T isArg_T `protobuf_oneof:"T"`
}

func (m *Arg) Reset()                    { *m = Arg{} }
func (m *Arg) String() string            { return proto.CompactTextString(m) }
func (*Arg) ProtoMessage()               {}
func (*Arg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isArg_T interface {
	isArg_T()
}

type Arg_I32 struct {
	I32 int32 `protobuf:"varint,1,opt,name=i32,oneof"`
}
type Arg_I64 struct {
	I64 int64 `protobuf:"varint,2,opt,name=i64,oneof"`
}
type Arg_F32 struct {
	F32 float32 `protobuf:"fixed32,3,opt,name=f32,oneof"`
}
type Arg_F64 struct {
	F64 float64 `protobuf:"fixed64,4,opt,name=f64,oneof"`
}
type Arg_B struct {
	B bool `protobuf:"varint,5,opt,name=b,oneof"`
}
type Arg_S struct {
	S string `protobuf:"bytes,6,opt,name=s,oneof"`
}

func (*Arg_I32) isArg_T() {}
func (*Arg_I64) isArg_T() {}
func (*Arg_F32) isArg_T() {}
func (*Arg_F64) isArg_T() {}
func (*Arg_B) isArg_T()   {}
func (*Arg_S) isArg_T()   {}

func (m *Arg) GetT() isArg_T {
	if m != nil {
		return m.T
	}
	return nil
}

func (m *Arg) GetI32() int32 {
	if x, ok := m.GetT().(*Arg_I32); ok {
		return x.I32
	}
	return 0
}

func (m *Arg) GetI64() int64 {
	if x, ok := m.GetT().(*Arg_I64); ok {
		return x.I64
	}
	return 0
}

func (m *Arg) GetF32() float32 {
	if x, ok := m.GetT().(*Arg_F32); ok {
		return x.F32
	}
	return 0
}

func (m *Arg) GetF64() float64 {
	if x, ok := m.GetT().(*Arg_F64); ok {
		return x.F64
	}
	return 0
}

func (m *Arg) GetB() bool {
	if x, ok := m.GetT().(*Arg_B); ok {
		return x.B
	}
	return false
}

func (m *Arg) GetS() string {
	if x, ok := m.GetT().(*Arg_S); ok {
		return x.S
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Arg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Arg_OneofMarshaler, _Arg_OneofUnmarshaler, _Arg_OneofSizer, []interface{}{
		(*Arg_I32)(nil),
		(*Arg_I64)(nil),
		(*Arg_F32)(nil),
		(*Arg_F64)(nil),
		(*Arg_B)(nil),
		(*Arg_S)(nil),
	}
}

func _Arg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Arg)
	// T
	switch x := m.T.(type) {
	case *Arg_I32:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.I32))
	case *Arg_I64:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.I64))
	case *Arg_F32:
		b.EncodeVarint(3<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(math.Float32bits(x.F32)))
	case *Arg_F64:
		b.EncodeVarint(4<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.F64))
	case *Arg_B:
		t := uint64(0)
		if x.B {
			t = 1
		}
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Arg_S:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.S)
	case nil:
	default:
		return fmt.Errorf("Arg.T has unexpected type %T", x)
	}
	return nil
}

func _Arg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Arg)
	switch tag {
	case 1: // T.i32
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.T = &Arg_I32{int32(x)}
		return true, err
	case 2: // T.i64
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.T = &Arg_I64{int64(x)}
		return true, err
	case 3: // T.f32
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.T = &Arg_F32{math.Float32frombits(uint32(x))}
		return true, err
	case 4: // T.f64
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.T = &Arg_F64{math.Float64frombits(x)}
		return true, err
	case 5: // T.b
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.T = &Arg_B{x != 0}
		return true, err
	case 6: // T.s
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.T = &Arg_S{x}
		return true, err
	default:
		return false, nil
	}
}

func _Arg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Arg)
	// T
	switch x := m.T.(type) {
	case *Arg_I32:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.I32))
	case *Arg_I64:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.I64))
	case *Arg_F32:
		n += proto.SizeVarint(3<<3 | proto.WireFixed32)
		n += 4
	case *Arg_F64:
		n += proto.SizeVarint(4<<3 | proto.WireFixed64)
		n += 8
	case *Arg_B:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += 1
	case *Arg_S:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.S)))
		n += len(x.S)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Record struct {
	ZoneId      uint32 `protobuf:"varint,1,opt,name=zone_id,json=zoneId" json:"zone_id,omitempty"`
	ServiceType uint32 `protobuf:"varint,2,opt,name=service_type,json=serviceType" json:"service_type,omitempty"`
	ServiceId   uint32 `protobuf:"varint,3,opt,name=service_id,json=serviceId" json:"service_id,omitempty"`
	Ts          int64  `protobuf:"varint,4,opt,name=ts" json:"ts,omitempty"`
	Id          uint32 `protobuf:"varint,5,opt,name=id" json:"id,omitempty"`
	Args        []*Arg `protobuf:"bytes,6,rep,name=args" json:"args,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Record) GetZoneId() uint32 {
	if m != nil {
		return m.ZoneId
	}
	return 0
}

func (m *Record) GetServiceType() uint32 {
	if m != nil {
		return m.ServiceType
	}
	return 0
}

func (m *Record) GetServiceId() uint32 {
	if m != nil {
		return m.ServiceId
	}
	return 0
}

func (m *Record) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *Record) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Record) GetArgs() []*Arg {
	if m != nil {
		return m.Args
	}
	return nil
}

func init() {
	proto.RegisterType((*Arg)(nil), "collector.Arg")
	proto.RegisterType((*Record)(nil), "collector.Record")
}

func init() { proto.RegisterFile("collector.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x44, 0x90, 0x31, 0x6f, 0xbb, 0x30,
	0x10, 0x47, 0x73, 0x38, 0xe1, 0xff, 0xe7, 0x52, 0xa8, 0xe4, 0xa5, 0x5e, 0x2a, 0xb9, 0x4c, 0x9e,
	0x32, 0x00, 0x62, 0x4f, 0xa7, 0x64, 0xb5, 0xb2, 0x47, 0x05, 0x1b, 0x64, 0x29, 0xaa, 0x91, 0x41,
	0x95, 0x92, 0x2f, 0xd4, 0xaf, 0x59, 0xf9, 0x9a, 0xb6, 0xe3, 0x7b, 0x77, 0xc3, 0xd3, 0x0f, 0x1f,
	0x7b, 0x7f, 0xb9, 0xd8, 0x7e, 0xf1, 0x61, 0x37, 0x05, 0xbf, 0x78, 0x9e, 0xfd, 0x8a, 0xf2, 0x86,
	0x6c, 0x1f, 0x46, 0xce, 0x91, 0xb9, 0xba, 0x12, 0x20, 0x41, 0x6d, 0x0e, 0x2b, 0x1d, 0x81, 0x5c,
	0xdb, 0x88, 0x44, 0x82, 0x62, 0xe4, 0xda, 0x26, 0xba, 0xa1, 0xae, 0x04, 0x93, 0xa0, 0x92, 0xe8,
	0x86, 0xef, 0xbf, 0xa1, 0x6d, 0xc4, 0x5a, 0x82, 0x02, 0x72, 0x6d, 0xc3, 0x0b, 0x84, 0x4e, 0x6c,
	0x24, 0xa8, 0xff, 0x87, 0x95, 0x86, 0x2e, 0xf2, 0x2c, 0x52, 0x09, 0x2a, 0x8b, 0x3c, 0xbf, 0x32,
	0x84, 0x53, 0xf9, 0x09, 0x98, 0x6a, 0xdb, 0xfb, 0x60, 0xf8, 0x13, 0xfe, 0xbb, 0xf9, 0x77, 0x7b,
	0x76, 0x86, 0x1a, 0x72, 0x9d, 0x46, 0x3c, 0x1a, 0xfe, 0x82, 0x0f, 0xb3, 0x0d, 0x1f, 0xae, 0xb7,
	0xe7, 0xe5, 0x3a, 0x59, 0xaa, 0xc9, 0xf5, 0xf6, 0xee, 0x4e, 0xd7, 0xc9, 0xf2, 0x67, 0xc4, 0x9f,
	0x17, 0x67, 0x28, 0x2d, 0xd7, 0xd9, 0xdd, 0x1c, 0x0d, 0x2f, 0x30, 0x59, 0x66, 0xaa, 0x63, 0x3a,
	0x59, 0xe6, 0xc8, 0xce, 0x50, 0x5b, 0xae, 0x13, 0x67, 0x78, 0x89, 0xeb, 0xb7, 0x30, 0xc6, 0x3a,
	0xa6, 0xb6, 0x55, 0xb1, 0xfb, 0x1b, 0x6b, 0x1f, 0x46, 0x4d, 0xb7, 0x2e, 0xa5, 0xdd, 0xea, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x56, 0xe9, 0xd5, 0x6b, 0x4a, 0x01, 0x00, 0x00,
}
