// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hero.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProjZombie {

  /// <summary>Holder for reflection information generated from hero.proto</summary>
  public static partial class HeroReflection {

    #region Descriptor
    /// <summary>File descriptor for hero.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HeroReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpoZXJvLnByb3RvEgRoZXJvIgcKBUVtcHR5IiMKBUVycm9yEgwKBGNvZGUY",
            "ASABKAUSDAoEYXJncxgCIAMoCSJ5CgVMb2dpbhIMCgRpbWVpGAEgASgJEhYK",
            "DmNsaWVudF92ZXJzaW9uGAIgASgJEg8KB2NoYW5uZWwYAyABKAkSEwoLZnlz",
            "ZGtfdG9rZW4YBCABKAkSEgoKZnlzZGtfdXVpZBgFIAEoCRIQCghuaWNrTmFt",
            "ZRgGIAEoCSIuCg1HdWVzdFJlZ2lzdGVyEg8KB2FjY291bnQYASABKAkSDAoE",
            "bmFtZRgCIAEoCSLBAQoJTG9naW5SZXNwEhgKA2VychgBIAEoCzILLmhlcm8u",
            "RXJyb3ISCwoDdWlkGAIgASgNEg0KBXRva2VuGAMgASgMEhIKCmFyZW5hU2Nv",
            "cmUYBCABKA0SEQoJYXJlbmFSYW5rGAUgASgNEhYKDmNoYWxsZW5nZVNjb3Jl",
            "GAYgASgEEhUKDWNoYWxsZW5nZVJhbmsYByABKA0SKAoGdXBkYXRlGAggASgL",
            "MhguaGVyby5WZXJzaW9uVXBkYXRlQWxlcnQiQgoSVmVyc2lvblVwZGF0ZUFs",
            "ZXJ0Eg0KBWZvcmNlGAEgASgIEg8KB3ZlcnNpb24YAiABKAkSDAoEbGluaxgD",
            "IAEoCSIeCg5HZXRBY2hpZXZlbWVudBIMCgRuYW1lGAEgASgJIjAKDlNldEFj",
            "aGlldmVtZW50EgwKBG5hbWUYASABKAkSEAoIbm93VmFsdWUYAiABKAUiIwoS",
            "R2V0QWNoaWV2ZW1lbnRSZXNwEg0KBXZhbHVlGAEgASgFIiwKHEdldEFyZW5h",
            "TGVhcmRlcmJvYXJkUmFua1Jlc3ASDAoEcmFuaxgBIAEoDSJAChRHZXRMZWFy",
            "ZGVyYm9hcmRSYW5nZRIMCgRuYW1lGAEgASgJEg0KBXN0YXJ0GAIgASgNEgsK",
            "A2VuZBgDIAEoDSI9ChBMZWFyZGVyYm9hcmRJbmZvEg0KBXNjb3JlGAEgASgF",
            "EgwKBHJhbmsYAiABKA0SDAoEbmFtZRgDIAEoCSJQChhHZXRMZWFyZGVyYm9h",
            "cmRSYW5nZVJlc3ASDQoFY291bnQYASABKA0SJQoFaW5mb3MYAiADKAsyFi5o",
            "ZXJvLkxlYXJkZXJib2FyZEluZm8iNgoXVXBkYXRlTGVhcmRlckJvYXJkU2Nv",
            "cmUSDAoEbmFtZRgCIAEoCRINCgVzY29yZRgBIAEoBCI/ChtVcGRhdGVMZWFy",
            "ZGVyQm9hcmRTY29yZVJlc3ASDwoHbmV3UmFuaxgBIAEoDRIPCgdzdWNjZXNz",
            "GAIgASgIIiEKEVVuTG9ja0FjaGlldmVtZW50EgwKBG5hbWUYASABKAkiJQoV",
            "VW5Mb2NrQWNoaWV2ZW1lbnRSZXNwEgwKBGRhdGUYASABKAkiJAoUR2V0VW5M",
            "b2NrQWNoaWV2ZURhdGUSDAoEbmFtZRgBIAEoCSIoChhHZXRVbkxvY2tBY2hp",
            "ZXZlRGF0ZVJlc3ASDAoEZGF0ZRgBIAEoCSqDAgoCQ0cSDgoKSURfWkVST19D",
            "RxAAEhMKDklEX0dVRVNUX0xPR0lOENEPEhYKEUlEX0dVRVNUX1JFR0lTVEVS",
            "ENIPEhcKEklEX0dFVF9BQ0hJRVZFTUVOVBDTDxIXChJJRF9TRVRfQUNISUVW",
            "RU1FTlQQ1A8SFgoRSURfR0VUX0FSRU5BX1JBTksQ1Q8SHgoZSURfR0VUX0xF",
            "QVJERVJCT0FSRF9SQU5HRRDWDxIaChVJRF9VUERBVEVfTEVBUkRfU0NPUkUQ",
            "1w8SGgoVSURfVU5MT0NLX0FDSElFVkVNRU5UENgPEh4KGUlEX0dFVF9VTkxP",
            "Q0tfQUNISUVWRURBVEUQ2Q8qlAIKAkdDEg4KCklEX1pFUk9fR0MQABIYChNJ",
            "RF9HVUVTVF9MT0dJTl9SRVNQELYXEhwKF0lEX0dFVF9BQ0hJRVZFTUVOVF9S",
            "RVNQELUXEhwKF0lEX1NFVF9BQ0hJRVZFTUVOVF9SRVNQELQXEhsKFklEX0dF",
            "VF9BUkVOQV9SQU5LX1JFU1AQsxcSIwoeSURfR0VUX0xFQVJERVJCT0FSRF9S",
            "QU5HRV9SRVNQELIXEiAKG0lEX1VQREFURV9MRUFSRF9TQ09SRUVfUkVTUBCx",
            "FxIfChpJRF9VTkxPQ0tfQUNISUVWRU1FTlRfUkVTUBCwFxIjCh5JRF9HRVRf",
            "VU5MT0NLX0FDSElFVkVEQVRFX1JFU1AQrxdCD0gDqgIKUHJvalpvbWJpZWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ProjZombie.CG), typeof(global::ProjZombie.GC), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ProjZombie.Empty), global::ProjZombie.Empty.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProjZombie.Error), global::ProjZombie.Error.Parser, new[]{ "Code", "Args" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProjZombie.Login), global::ProjZombie.Login.Parser, new[]{ "Imei", "ClientVersion", "Channel", "FysdkToken", "FysdkUuid", "NickName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProjZombie.GuestRegister), global::ProjZombie.GuestRegister.Parser, new[]{ "Account", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProjZombie.LoginResp), global::ProjZombie.LoginResp.Parser, new[]{ "Err", "Uid", "Token", "ArenaScore", "ArenaRank", "ChallengeScore", "ChallengeRank", "Update" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProjZombie.VersionUpdateAlert), global::ProjZombie.VersionUpdateAlert.Parser, new[]{ "Force", "Version", "Link" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProjZombie.GetAchievement), global::ProjZombie.GetAchievement.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProjZombie.SetAchievement), global::ProjZombie.SetAchievement.Parser, new[]{ "Name", "NowValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProjZombie.GetAchievementResp), global::ProjZombie.GetAchievementResp.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProjZombie.GetArenaLearderboardRankResp), global::ProjZombie.GetArenaLearderboardRankResp.Parser, new[]{ "Rank" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProjZombie.GetLearderboardRange), global::ProjZombie.GetLearderboardRange.Parser, new[]{ "Name", "Start", "End" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProjZombie.LearderboardInfo), global::ProjZombie.LearderboardInfo.Parser, new[]{ "Score", "Rank", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProjZombie.GetLearderboardRangeResp), global::ProjZombie.GetLearderboardRangeResp.Parser, new[]{ "Count", "Infos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProjZombie.UpdateLearderBoardScore), global::ProjZombie.UpdateLearderBoardScore.Parser, new[]{ "Name", "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProjZombie.UpdateLearderBoardScoreResp), global::ProjZombie.UpdateLearderBoardScoreResp.Parser, new[]{ "NewRank", "Success" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProjZombie.UnLockAchievement), global::ProjZombie.UnLockAchievement.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProjZombie.UnLockAchievementResp), global::ProjZombie.UnLockAchievementResp.Parser, new[]{ "Date" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProjZombie.GetUnLockAchieveDate), global::ProjZombie.GetUnLockAchieveDate.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProjZombie.GetUnLockAchieveDateResp), global::ProjZombie.GetUnLockAchieveDateResp.Parser, new[]{ "Date" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// 指令号定义
  /// </summary>
  public enum CG {
    [pbr::OriginalName("ID_ZERO_CG")] IdZeroCg = 0,
    /// <summary>
    /// 登录[Login]
    /// </summary>
    [pbr::OriginalName("ID_GUEST_LOGIN")] IdGuestLogin = 2001,
    /// <summary>
    /// 注册并登录[GuestRegister]
    /// </summary>
    [pbr::OriginalName("ID_GUEST_REGISTER")] IdGuestRegister = 2002,
    /// <summary>
    /// 获取某个成就的信息 [GetAchievement]
    /// </summary>
    [pbr::OriginalName("ID_GET_ACHIEVEMENT")] IdGetAchievement = 2003,
    /// <summary>
    /// 设置某个成就的信息[SetAchievement]
    /// </summary>
    [pbr::OriginalName("ID_SET_ACHIEVEMENT")] IdSetAchievement = 2004,
    /// <summary>
    /// 获取车间战斗某个玩家排名[Empty]
    /// </summary>
    [pbr::OriginalName("ID_GET_ARENA_RANK")] IdGetArenaRank = 2005,
    /// <summary>
    /// 获取某个区域[start, end}排行榜信息[GetLearderboardRange]
    /// </summary>
    [pbr::OriginalName("ID_GET_LEARDERBOARD_RANGE")] IdGetLearderboardRange = 2006,
    /// <summary>
    /// 更新排行榜分数[UpdateLearderBoardScore]
    /// </summary>
    [pbr::OriginalName("ID_UPDATE_LEARD_SCORE")] IdUpdateLeardScore = 2007,
    /// <summary>
    /// 解锁成就，现在实际上是需要记录成就解锁的时间[UnLockAchievement]
    /// </summary>
    [pbr::OriginalName("ID_UNLOCK_ACHIEVEMENT")] IdUnlockAchievement = 2008,
    /// <summary>
    /// 获取成就解锁的时间[GetUnLockAchieveDate]
    /// </summary>
    [pbr::OriginalName("ID_GET_UNLOCK_ACHIEVEDATE")] IdGetUnlockAchievedate = 2009,
  }

  /// <summary>
  /// 协议号定义
  /// </summary>
  public enum GC {
    [pbr::OriginalName("ID_ZERO_GC")] IdZeroGc = 0,
    /// <summary>
    /// 登录反馈[LoginResp]
    /// </summary>
    [pbr::OriginalName("ID_GUEST_LOGIN_RESP")] IdGuestLoginResp = 2998,
    /// <summary>
    /// 获取已经解锁的成就返回[GetAchievementResp]
    /// </summary>
    [pbr::OriginalName("ID_GET_ACHIEVEMENT_RESP")] IdGetAchievementResp = 2997,
    /// <summary>
    ///[Empty]
    /// </summary>
    [pbr::OriginalName("ID_SET_ACHIEVEMENT_RESP")] IdSetAchievementResp = 2996,
    /// <summary>
    /// 获取车间战斗某个玩家排名返回 [GetArenaLearderboardRankResp]
    /// </summary>
    [pbr::OriginalName("ID_GET_ARENA_RANK_RESP")] IdGetArenaRankResp = 2995,
    /// <summary>
    /// 获取某个区域[start, end}排行榜信息返回[GetLearderboardRangeResp]
    /// </summary>
    [pbr::OriginalName("ID_GET_LEARDERBOARD_RANGE_RESP")] IdGetLearderboardRangeResp = 2994,
    /// <summary>
    /// 更新排行榜分数返回 新的当前排名【UpdateLearderBoardScoreResp】
    /// </summary>
    [pbr::OriginalName("ID_UPDATE_LEARD_SCOREE_RESP")] IdUpdateLeardScoreeResp = 2993,
    /// <summary>
    /// 解锁成就 返回 日期 [UnLockAchievementResp]
    /// </summary>
    [pbr::OriginalName("ID_UNLOCK_ACHIEVEMENT_RESP")] IdUnlockAchievementResp = 2992,
    /// <summary>
    /// 成就的解锁时间 [GetUnLockAchieveDateResp]
    /// </summary>
    [pbr::OriginalName("ID_GET_UNLOCK_ACHIEVEDATE_RESP")] IdGetUnlockAchievedateResp = 2991,
  }

  #endregion

  #region Messages
  public sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProjZombie.HeroReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty(Empty other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty Clone() {
      return new Empty(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProjZombie.HeroReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      code_ = other.code_;
      args_ = other.args_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    /// 错误代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_args_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> args_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 附加参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Args {
      get { return args_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if(!args_.Equals(other.args_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      hash ^= args_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      args_.WriteTo(output, _repeated_args_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      args_.Add(other.args_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Login : pb::IMessage<Login> {
    private static readonly pb::MessageParser<Login> _parser = new pb::MessageParser<Login>(() => new Login());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Login> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProjZombie.HeroReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login(Login other) : this() {
      imei_ = other.imei_;
      clientVersion_ = other.clientVersion_;
      channel_ = other.channel_;
      fysdkToken_ = other.fysdkToken_;
      fysdkUuid_ = other.fysdkUuid_;
      nickName_ = other.nickName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login Clone() {
      return new Login(this);
    }

    /// <summary>Field number for the "imei" field.</summary>
    public const int ImeiFieldNumber = 1;
    private string imei_ = "";
    /// <summary>
    /// 设备号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Imei {
      get { return imei_; }
      set {
        imei_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 2;
    private string clientVersion_ = "";
    /// <summary>
    /// 客户端版本号 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 3;
    private string channel_ = "";
    /// <summary>
    /// 渠道编号[6位数字]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fysdk_token" field.</summary>
    public const int FysdkTokenFieldNumber = 4;
    private string fysdkToken_ = "";
    /// <summary>
    /// FYSDK的token字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FysdkToken {
      get { return fysdkToken_; }
      set {
        fysdkToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fysdk_uuid" field.</summary>
    public const int FysdkUuidFieldNumber = 5;
    private string fysdkUuid_ = "";
    /// <summary>
    /// FYSDK的uuid字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FysdkUuid {
      get { return fysdkUuid_; }
      set {
        fysdkUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 6;
    private string nickName_ = "";
    /// <summary>
    /// 玩家名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Login);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Login other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Imei != other.Imei) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (Channel != other.Channel) return false;
      if (FysdkToken != other.FysdkToken) return false;
      if (FysdkUuid != other.FysdkUuid) return false;
      if (NickName != other.NickName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Imei.Length != 0) hash ^= Imei.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (FysdkToken.Length != 0) hash ^= FysdkToken.GetHashCode();
      if (FysdkUuid.Length != 0) hash ^= FysdkUuid.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Imei.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Imei);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientVersion);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Channel);
      }
      if (FysdkToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FysdkToken);
      }
      if (FysdkUuid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FysdkUuid);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(NickName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Imei.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Imei);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (FysdkToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FysdkToken);
      }
      if (FysdkUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FysdkUuid);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Login other) {
      if (other == null) {
        return;
      }
      if (other.Imei.Length != 0) {
        Imei = other.Imei;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.FysdkToken.Length != 0) {
        FysdkToken = other.FysdkToken;
      }
      if (other.FysdkUuid.Length != 0) {
        FysdkUuid = other.FysdkUuid;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Imei = input.ReadString();
            break;
          }
          case 18: {
            ClientVersion = input.ReadString();
            break;
          }
          case 26: {
            Channel = input.ReadString();
            break;
          }
          case 34: {
            FysdkToken = input.ReadString();
            break;
          }
          case 42: {
            FysdkUuid = input.ReadString();
            break;
          }
          case 50: {
            NickName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GuestRegister : pb::IMessage<GuestRegister> {
    private static readonly pb::MessageParser<GuestRegister> _parser = new pb::MessageParser<GuestRegister>(() => new GuestRegister());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuestRegister> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProjZombie.HeroReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuestRegister() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuestRegister(GuestRegister other) : this() {
      account_ = other.account_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuestRegister Clone() {
      return new GuestRegister(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    /// 账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuestRegister);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuestRegister other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuestRegister other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginResp : pb::IMessage<LoginResp> {
    private static readonly pb::MessageParser<LoginResp> _parser = new pb::MessageParser<LoginResp>(() => new LoginResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProjZombie.HeroReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResp(LoginResp other) : this() {
      Err = other.err_ != null ? other.Err.Clone() : null;
      uid_ = other.uid_;
      token_ = other.token_;
      arenaScore_ = other.arenaScore_;
      arenaRank_ = other.arenaRank_;
      challengeScore_ = other.challengeScore_;
      challengeRank_ = other.challengeRank_;
      Update = other.update_ != null ? other.Update.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResp Clone() {
      return new LoginResp(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private global::ProjZombie.Error err_;
    /// <summary>
    /// 是否出错
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProjZombie.Error Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private uint uid_;
    /// <summary>
    /// 角色编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private pb::ByteString token_ = pb::ByteString.Empty;
    /// <summary>
    /// 访问令牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "arenaScore" field.</summary>
    public const int ArenaScoreFieldNumber = 4;
    private uint arenaScore_;
    /// <summary>
    /// 车间战斗分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArenaScore {
      get { return arenaScore_; }
      set {
        arenaScore_ = value;
      }
    }

    /// <summary>Field number for the "arenaRank" field.</summary>
    public const int ArenaRankFieldNumber = 5;
    private uint arenaRank_;
    /// <summary>
    ///车间战斗排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArenaRank {
      get { return arenaRank_; }
      set {
        arenaRank_ = value;
      }
    }

    /// <summary>Field number for the "challengeScore" field.</summary>
    public const int ChallengeScoreFieldNumber = 6;
    private ulong challengeScore_;
    /// <summary>
    /// 特殊挑战分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChallengeScore {
      get { return challengeScore_; }
      set {
        challengeScore_ = value;
      }
    }

    /// <summary>Field number for the "challengeRank" field.</summary>
    public const int ChallengeRankFieldNumber = 7;
    private uint challengeRank_;
    /// <summary>
    ///特殊挑战排名排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeRank {
      get { return challengeRank_; }
      set {
        challengeRank_ = value;
      }
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 8;
    private global::ProjZombie.VersionUpdateAlert update_;
    /// <summary>
    /// 版本更新提醒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProjZombie.VersionUpdateAlert Update {
      get { return update_; }
      set {
        update_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Err, other.Err)) return false;
      if (Uid != other.Uid) return false;
      if (Token != other.Token) return false;
      if (ArenaScore != other.ArenaScore) return false;
      if (ArenaRank != other.ArenaRank) return false;
      if (ChallengeScore != other.ChallengeScore) return false;
      if (ChallengeRank != other.ChallengeRank) return false;
      if (!object.Equals(Update, other.Update)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (err_ != null) hash ^= Err.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (ArenaScore != 0) hash ^= ArenaScore.GetHashCode();
      if (ArenaRank != 0) hash ^= ArenaRank.GetHashCode();
      if (ChallengeScore != 0UL) hash ^= ChallengeScore.GetHashCode();
      if (ChallengeRank != 0) hash ^= ChallengeRank.GetHashCode();
      if (update_ != null) hash ^= Update.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (err_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Err);
      }
      if (Uid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Uid);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Token);
      }
      if (ArenaScore != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ArenaScore);
      }
      if (ArenaRank != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ArenaRank);
      }
      if (ChallengeScore != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(ChallengeScore);
      }
      if (ChallengeRank != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ChallengeRank);
      }
      if (update_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Update);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (err_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Err);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Token);
      }
      if (ArenaScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArenaScore);
      }
      if (ArenaRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArenaRank);
      }
      if (ChallengeScore != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChallengeScore);
      }
      if (ChallengeRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeRank);
      }
      if (update_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResp other) {
      if (other == null) {
        return;
      }
      if (other.err_ != null) {
        if (err_ == null) {
          err_ = new global::ProjZombie.Error();
        }
        Err.MergeFrom(other.Err);
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.ArenaScore != 0) {
        ArenaScore = other.ArenaScore;
      }
      if (other.ArenaRank != 0) {
        ArenaRank = other.ArenaRank;
      }
      if (other.ChallengeScore != 0UL) {
        ChallengeScore = other.ChallengeScore;
      }
      if (other.ChallengeRank != 0) {
        ChallengeRank = other.ChallengeRank;
      }
      if (other.update_ != null) {
        if (update_ == null) {
          update_ = new global::ProjZombie.VersionUpdateAlert();
        }
        Update.MergeFrom(other.Update);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (err_ == null) {
              err_ = new global::ProjZombie.Error();
            }
            input.ReadMessage(err_);
            break;
          }
          case 16: {
            Uid = input.ReadUInt32();
            break;
          }
          case 26: {
            Token = input.ReadBytes();
            break;
          }
          case 32: {
            ArenaScore = input.ReadUInt32();
            break;
          }
          case 40: {
            ArenaRank = input.ReadUInt32();
            break;
          }
          case 48: {
            ChallengeScore = input.ReadUInt64();
            break;
          }
          case 56: {
            ChallengeRank = input.ReadUInt32();
            break;
          }
          case 66: {
            if (update_ == null) {
              update_ = new global::ProjZombie.VersionUpdateAlert();
            }
            input.ReadMessage(update_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 版本更新提醒
  /// </summary>
  public sealed partial class VersionUpdateAlert : pb::IMessage<VersionUpdateAlert> {
    private static readonly pb::MessageParser<VersionUpdateAlert> _parser = new pb::MessageParser<VersionUpdateAlert>(() => new VersionUpdateAlert());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersionUpdateAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProjZombie.HeroReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionUpdateAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionUpdateAlert(VersionUpdateAlert other) : this() {
      force_ = other.force_;
      version_ = other.version_;
      link_ = other.link_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionUpdateAlert Clone() {
      return new VersionUpdateAlert(this);
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 1;
    private bool force_;
    /// <summary>
    /// 是否强制更新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    /// <summary>
    /// 新版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "link" field.</summary>
    public const int LinkFieldNumber = 3;
    private string link_ = "";
    /// <summary>
    /// 下载链接
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Link {
      get { return link_; }
      set {
        link_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersionUpdateAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersionUpdateAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Force != other.Force) return false;
      if (Version != other.Version) return false;
      if (Link != other.Link) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Force != false) hash ^= Force.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Link.Length != 0) hash ^= Link.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Force != false) {
        output.WriteRawTag(8);
        output.WriteBool(Force);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (Link.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Link);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Force != false) {
        size += 1 + 1;
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Link.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Link);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersionUpdateAlert other) {
      if (other == null) {
        return;
      }
      if (other.Force != false) {
        Force = other.Force;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Link.Length != 0) {
        Link = other.Link;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Force = input.ReadBool();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 26: {
            Link = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAchievement : pb::IMessage<GetAchievement> {
    private static readonly pb::MessageParser<GetAchievement> _parser = new pb::MessageParser<GetAchievement>(() => new GetAchievement());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAchievement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProjZombie.HeroReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAchievement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAchievement(GetAchievement other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAchievement Clone() {
      return new GetAchievement(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAchievement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAchievement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAchievement other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetAchievement : pb::IMessage<SetAchievement> {
    private static readonly pb::MessageParser<SetAchievement> _parser = new pb::MessageParser<SetAchievement>(() => new SetAchievement());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetAchievement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProjZombie.HeroReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAchievement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAchievement(SetAchievement other) : this() {
      name_ = other.name_;
      nowValue_ = other.nowValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAchievement Clone() {
      return new SetAchievement(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nowValue" field.</summary>
    public const int NowValueFieldNumber = 2;
    private int nowValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NowValue {
      get { return nowValue_; }
      set {
        nowValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetAchievement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetAchievement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (NowValue != other.NowValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NowValue != 0) hash ^= NowValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (NowValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NowValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NowValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetAchievement other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NowValue != 0) {
        NowValue = other.NowValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            NowValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAchievementResp : pb::IMessage<GetAchievementResp> {
    private static readonly pb::MessageParser<GetAchievementResp> _parser = new pb::MessageParser<GetAchievementResp>(() => new GetAchievementResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAchievementResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProjZombie.HeroReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAchievementResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAchievementResp(GetAchievementResp other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAchievementResp Clone() {
      return new GetAchievementResp(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    /// <summary>
    /// 当前次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAchievementResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAchievementResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAchievementResp other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetArenaLearderboardRankResp : pb::IMessage<GetArenaLearderboardRankResp> {
    private static readonly pb::MessageParser<GetArenaLearderboardRankResp> _parser = new pb::MessageParser<GetArenaLearderboardRankResp>(() => new GetArenaLearderboardRankResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetArenaLearderboardRankResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProjZombie.HeroReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetArenaLearderboardRankResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetArenaLearderboardRankResp(GetArenaLearderboardRankResp other) : this() {
      rank_ = other.rank_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetArenaLearderboardRankResp Clone() {
      return new GetArenaLearderboardRankResp(this);
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private uint rank_;
    /// <summary>
    /// 排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetArenaLearderboardRankResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetArenaLearderboardRankResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rank != other.Rank) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rank != 0) hash ^= Rank.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Rank);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetArenaLearderboardRankResp other) {
      if (other == null) {
        return;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rank = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetLearderboardRange : pb::IMessage<GetLearderboardRange> {
    private static readonly pb::MessageParser<GetLearderboardRange> _parser = new pb::MessageParser<GetLearderboardRange>(() => new GetLearderboardRange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLearderboardRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProjZombie.HeroReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLearderboardRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLearderboardRange(GetLearderboardRange other) : this() {
      name_ = other.name_;
      start_ = other.start_;
      end_ = other.end_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLearderboardRange Clone() {
      return new GetLearderboardRange(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///排行榜名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    private uint start_;
    /// <summary>
    /// 起始排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 3;
    private uint end_;
    /// <summary>
    /// 最终排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLearderboardRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLearderboardRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Start != 0) hash ^= Start.GetHashCode();
      if (End != 0) hash ^= End.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Start != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Start);
      }
      if (End != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(End);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Start);
      }
      if (End != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(End);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLearderboardRange other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.End != 0) {
        End = other.End;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Start = input.ReadUInt32();
            break;
          }
          case 24: {
            End = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LearderboardInfo : pb::IMessage<LearderboardInfo> {
    private static readonly pb::MessageParser<LearderboardInfo> _parser = new pb::MessageParser<LearderboardInfo>(() => new LearderboardInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LearderboardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProjZombie.HeroReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LearderboardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LearderboardInfo(LearderboardInfo other) : this() {
      score_ = other.score_;
      rank_ = other.rank_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LearderboardInfo Clone() {
      return new LearderboardInfo(this);
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private int score_;
    /// <summary>
    /// 分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 2;
    private uint rank_;
    /// <summary>
    /// 排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LearderboardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LearderboardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Score != other.Score) return false;
      if (Rank != other.Rank) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Score != 0) hash ^= Score.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Score);
      }
      if (Rank != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Rank);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LearderboardInfo other) {
      if (other == null) {
        return;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Score = input.ReadInt32();
            break;
          }
          case 16: {
            Rank = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetLearderboardRangeResp : pb::IMessage<GetLearderboardRangeResp> {
    private static readonly pb::MessageParser<GetLearderboardRangeResp> _parser = new pb::MessageParser<GetLearderboardRangeResp>(() => new GetLearderboardRangeResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLearderboardRangeResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProjZombie.HeroReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLearderboardRangeResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLearderboardRangeResp(GetLearderboardRangeResp other) : this() {
      count_ = other.count_;
      infos_ = other.infos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLearderboardRangeResp Clone() {
      return new GetLearderboardRangeResp(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private uint count_;
    /// <summary>
    /// 条目数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ProjZombie.LearderboardInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(18, global::ProjZombie.LearderboardInfo.Parser);
    private readonly pbc::RepeatedField<global::ProjZombie.LearderboardInfo> infos_ = new pbc::RepeatedField<global::ProjZombie.LearderboardInfo>();
    /// <summary>
    ///具体信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProjZombie.LearderboardInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLearderboardRangeResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLearderboardRangeResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if(!infos_.Equals(other.infos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      hash ^= infos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Count);
      }
      infos_.WriteTo(output, _repeated_infos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLearderboardRangeResp other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      infos_.Add(other.infos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadUInt32();
            break;
          }
          case 18: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateLearderBoardScore : pb::IMessage<UpdateLearderBoardScore> {
    private static readonly pb::MessageParser<UpdateLearderBoardScore> _parser = new pb::MessageParser<UpdateLearderBoardScore>(() => new UpdateLearderBoardScore());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateLearderBoardScore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProjZombie.HeroReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateLearderBoardScore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateLearderBoardScore(UpdateLearderBoardScore other) : this() {
      name_ = other.name_;
      score_ = other.score_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateLearderBoardScore Clone() {
      return new UpdateLearderBoardScore(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///排行榜名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private ulong score_;
    /// <summary>
    /// 新的分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateLearderBoardScore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateLearderBoardScore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Score != other.Score) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Score != 0UL) hash ^= Score.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Score);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Score != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateLearderBoardScore other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Score != 0UL) {
        Score = other.Score;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Score = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateLearderBoardScoreResp : pb::IMessage<UpdateLearderBoardScoreResp> {
    private static readonly pb::MessageParser<UpdateLearderBoardScoreResp> _parser = new pb::MessageParser<UpdateLearderBoardScoreResp>(() => new UpdateLearderBoardScoreResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateLearderBoardScoreResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProjZombie.HeroReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateLearderBoardScoreResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateLearderBoardScoreResp(UpdateLearderBoardScoreResp other) : this() {
      newRank_ = other.newRank_;
      success_ = other.success_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateLearderBoardScoreResp Clone() {
      return new UpdateLearderBoardScoreResp(this);
    }

    /// <summary>Field number for the "newRank" field.</summary>
    public const int NewRankFieldNumber = 1;
    private uint newRank_;
    /// <summary>
    /// 新的排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewRank {
      get { return newRank_; }
      set {
        newRank_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    /// <summary>
    ///替换是否成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateLearderBoardScoreResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateLearderBoardScoreResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NewRank != other.NewRank) return false;
      if (Success != other.Success) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NewRank != 0) hash ^= NewRank.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewRank != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NewRank);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewRank);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateLearderBoardScoreResp other) {
      if (other == null) {
        return;
      }
      if (other.NewRank != 0) {
        NewRank = other.NewRank;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NewRank = input.ReadUInt32();
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnLockAchievement : pb::IMessage<UnLockAchievement> {
    private static readonly pb::MessageParser<UnLockAchievement> _parser = new pb::MessageParser<UnLockAchievement>(() => new UnLockAchievement());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnLockAchievement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProjZombie.HeroReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnLockAchievement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnLockAchievement(UnLockAchievement other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnLockAchievement Clone() {
      return new UnLockAchievement(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 成就名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnLockAchievement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnLockAchievement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnLockAchievement other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnLockAchievementResp : pb::IMessage<UnLockAchievementResp> {
    private static readonly pb::MessageParser<UnLockAchievementResp> _parser = new pb::MessageParser<UnLockAchievementResp>(() => new UnLockAchievementResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnLockAchievementResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProjZombie.HeroReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnLockAchievementResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnLockAchievementResp(UnLockAchievementResp other) : this() {
      date_ = other.date_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnLockAchievementResp Clone() {
      return new UnLockAchievementResp(this);
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 1;
    private string date_ = "";
    /// <summary>
    /// 日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnLockAchievementResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnLockAchievementResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Date != other.Date) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Date.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Date);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Date.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnLockAchievementResp other) {
      if (other == null) {
        return;
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Date = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetUnLockAchieveDate : pb::IMessage<GetUnLockAchieveDate> {
    private static readonly pb::MessageParser<GetUnLockAchieveDate> _parser = new pb::MessageParser<GetUnLockAchieveDate>(() => new GetUnLockAchieveDate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetUnLockAchieveDate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProjZombie.HeroReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUnLockAchieveDate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUnLockAchieveDate(GetUnLockAchieveDate other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUnLockAchieveDate Clone() {
      return new GetUnLockAchieveDate(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 成就名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetUnLockAchieveDate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetUnLockAchieveDate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetUnLockAchieveDate other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetUnLockAchieveDateResp : pb::IMessage<GetUnLockAchieveDateResp> {
    private static readonly pb::MessageParser<GetUnLockAchieveDateResp> _parser = new pb::MessageParser<GetUnLockAchieveDateResp>(() => new GetUnLockAchieveDateResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetUnLockAchieveDateResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProjZombie.HeroReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUnLockAchieveDateResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUnLockAchieveDateResp(GetUnLockAchieveDateResp other) : this() {
      date_ = other.date_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUnLockAchieveDateResp Clone() {
      return new GetUnLockAchieveDateResp(this);
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 1;
    private string date_ = "";
    /// <summary>
    /// 成就解锁时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetUnLockAchieveDateResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetUnLockAchieveDateResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Date != other.Date) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Date.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Date);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Date.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetUnLockAchieveDateResp other) {
      if (other == null) {
        return;
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Date = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
