// Code generated by protoc-gen-go.
// source: id.proto
// DO NOT EDIT!

/*
Package fat is a generated protocol buffer package.

It is generated from these files:
	id.proto
	fat.proto

It has these top-level messages:
	Empty
	Error
	Ping
	Pong
	Resource
	SkinWinData
	Activity
	Profile
	VersionUpdateAlert
	Announcement
	InviteCodeReq
	InviteCodeResp
	GuestLogin
	Tiers
	Money
	GuestLoginResp
	NickSet
	NickSetResp
	MatchBegin
	MatchBeginResp
	MatchQuery
	MatchQueryResp
	OpponentInfo
	MatchMemberDetail
	MatchReward
	MatchTaskReward
	MatchRewardResp
	SigninViewResp
	SigninForm
	SigninResp
	ZoneListResp
	ZoneSet
	ZoneSetResp
	IAPVerifyForm
	IAPVerifyResp
	MatchRepeatState
	MatchRepeatStateResp
	MatchEnd
	MatchEndResp
	RankBegin
	RankBeginResp
	RankQuery
	RankQueryResp
	RankUser
	RankReward
	RankRewardResp
	RankCancel
	RankCancelResp
	RankInfo
	Reward
	RankInfoResp
	RankSelf
	CombatGains
	RankSelfResp
	RankTiers
	RankTiersResp
	RankSeasonReward
	SeasonReward
	RankSeasonRewardResp
	Shopping
	ShoppingResp
	SelfMoney
	SelfMoneyResp
	ADReward
	AdRewardResp
	CDKey
	CDKeyExchangeResp
	PaymentNotify
	HeartBeat
*/
package fat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 指令号定义
type CG int32

const (
	CG_CG_ID_ZERO            CG = 0
	CG_ID_PING               CG = 1000
	CG_ID_GUEST_LOGIN        CG = 1001
	CG_ID_MATCH_BEGIN        CG = 1002
	CG_ID_MATCH_QUERY        CG = 1003
	CG_ID_MATCH_REWARD       CG = 1004
	CG_ID_SIGNIN_VIEW        CG = 1005
	CG_ID_SIGNIN             CG = 1006
	CG_ID_NICK_SET           CG = 1007
	CG_ID_ZONE_LIST          CG = 1008
	CG_ID_ZONE_SET           CG = 1009
	CG_ID_MATCH_END          CG = 1010
	CG_ID_MATCH_REPEAT_STATE CG = 1011
	CG_ID_INVITE_CODE        CG = 1020
	CG_ID_HEART_BEAT         CG = 1021
	CG_ID_IAP_VERIFY         CG = 1080
	CG_ID_CDKEY_EXCHANGE     CG = 1081
	CG_ID_RANK_BEGIN         CG = 1201
	CG_ID_RANK_QUERY         CG = 1202
	CG_ID_RANK_REWARD        CG = 1203
	CG_ID_RANK_CANCEL        CG = 1204
	CG_ID_RANK_INFO          CG = 1205
	CG_ID_RANK_SELF          CG = 1206
	CG_ID_RANK_TIERS         CG = 1207
	CG_ID_RANK_SEASONREWARD  CG = 1208
	CG_ID_SHOPPING           CG = 1301
	CG_ID_SELF_MONEY         CG = 1302
	CG_ID_AD_REWARD          CG = 1303
)

var CG_name = map[int32]string{
	0:    "CG_ID_ZERO",
	1000: "ID_PING",
	1001: "ID_GUEST_LOGIN",
	1002: "ID_MATCH_BEGIN",
	1003: "ID_MATCH_QUERY",
	1004: "ID_MATCH_REWARD",
	1005: "ID_SIGNIN_VIEW",
	1006: "ID_SIGNIN",
	1007: "ID_NICK_SET",
	1008: "ID_ZONE_LIST",
	1009: "ID_ZONE_SET",
	1010: "ID_MATCH_END",
	1011: "ID_MATCH_REPEAT_STATE",
	1020: "ID_INVITE_CODE",
	1021: "ID_HEART_BEAT",
	1080: "ID_IAP_VERIFY",
	1081: "ID_CDKEY_EXCHANGE",
	1201: "ID_RANK_BEGIN",
	1202: "ID_RANK_QUERY",
	1203: "ID_RANK_REWARD",
	1204: "ID_RANK_CANCEL",
	1205: "ID_RANK_INFO",
	1206: "ID_RANK_SELF",
	1207: "ID_RANK_TIERS",
	1208: "ID_RANK_SEASONREWARD",
	1301: "ID_SHOPPING",
	1302: "ID_SELF_MONEY",
	1303: "ID_AD_REWARD",
}
var CG_value = map[string]int32{
	"CG_ID_ZERO":            0,
	"ID_PING":               1000,
	"ID_GUEST_LOGIN":        1001,
	"ID_MATCH_BEGIN":        1002,
	"ID_MATCH_QUERY":        1003,
	"ID_MATCH_REWARD":       1004,
	"ID_SIGNIN_VIEW":        1005,
	"ID_SIGNIN":             1006,
	"ID_NICK_SET":           1007,
	"ID_ZONE_LIST":          1008,
	"ID_ZONE_SET":           1009,
	"ID_MATCH_END":          1010,
	"ID_MATCH_REPEAT_STATE": 1011,
	"ID_INVITE_CODE":        1020,
	"ID_HEART_BEAT":         1021,
	"ID_IAP_VERIFY":         1080,
	"ID_CDKEY_EXCHANGE":     1081,
	"ID_RANK_BEGIN":         1201,
	"ID_RANK_QUERY":         1202,
	"ID_RANK_REWARD":        1203,
	"ID_RANK_CANCEL":        1204,
	"ID_RANK_INFO":          1205,
	"ID_RANK_SELF":          1206,
	"ID_RANK_TIERS":         1207,
	"ID_RANK_SEASONREWARD":  1208,
	"ID_SHOPPING":           1301,
	"ID_SELF_MONEY":         1302,
	"ID_AD_REWARD":          1303,
}

func (x CG) String() string {
	return proto.EnumName(CG_name, int32(x))
}
func (CG) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 协议号定义
type GC int32

const (
	GC_GC_ID_ZERO                 GC = 0
	GC_ID_PONG                    GC = 1999
	GC_ID_GUEST_LOGIN_RESP        GC = 1998
	GC_ID_MATCH_BEGIN_RESP        GC = 1997
	GC_ID_MATCH_QUERY_RESP        GC = 1996
	GC_ID_MATCH_REWARD_RESP       GC = 1995
	GC_ID_SIGNIN_VIEW_RESP        GC = 1994
	GC_ID_SIGNIN_RESP             GC = 1993
	GC_ID_NICK_SET_RESP           GC = 1992
	GC_ID_ZONE_LIST_RESP          GC = 1991
	GC_ID_ZONE_SET_RESP           GC = 1990
	GC_ID_MATCH_END_RESP          GC = 1989
	GC_ID_MATCH_REPEAT_STATE_RESP GC = 1988
	GC_ID_INVITE_CODE_RESP        GC = 1979
	GC_ID_HEART_BEAT_RESP         GC = 1978
	GC_ID_IAP_VERIFY_RESP         GC = 1920
	GC_ID_CDKEY_EXCHANGE_RESP     GC = 1919
	GC_ID_RANK_BEGIN_RESP         GC = 1799
	GC_ID_RANK_QUERY_RESP         GC = 1798
	GC_ID_RANK_REWARD_RESP        GC = 1797
	GC_ID_RANK_CANCEL_RESP        GC = 1796
	GC_ID_RANK_INFO_RESP          GC = 1795
	GC_ID_RANK_SELF_RESP          GC = 1794
	GC_ID_RANK_TIERS_RESP         GC = 1793
	GC_ID_RANK_SEASONREWARD_RESP  GC = 1792
	GC_ID_SHOPPING_RESP           GC = 1699
	GC_ID_SELF_MONEY_RESP         GC = 1698
	GC_ID_AD_REWARD_RESP          GC = 1697
)

var GC_name = map[int32]string{
	0:    "GC_ID_ZERO",
	1999: "ID_PONG",
	1998: "ID_GUEST_LOGIN_RESP",
	1997: "ID_MATCH_BEGIN_RESP",
	1996: "ID_MATCH_QUERY_RESP",
	1995: "ID_MATCH_REWARD_RESP",
	1994: "ID_SIGNIN_VIEW_RESP",
	1993: "ID_SIGNIN_RESP",
	1992: "ID_NICK_SET_RESP",
	1991: "ID_ZONE_LIST_RESP",
	1990: "ID_ZONE_SET_RESP",
	1989: "ID_MATCH_END_RESP",
	1988: "ID_MATCH_REPEAT_STATE_RESP",
	1979: "ID_INVITE_CODE_RESP",
	1978: "ID_HEART_BEAT_RESP",
	1920: "ID_IAP_VERIFY_RESP",
	1919: "ID_CDKEY_EXCHANGE_RESP",
	1799: "ID_RANK_BEGIN_RESP",
	1798: "ID_RANK_QUERY_RESP",
	1797: "ID_RANK_REWARD_RESP",
	1796: "ID_RANK_CANCEL_RESP",
	1795: "ID_RANK_INFO_RESP",
	1794: "ID_RANK_SELF_RESP",
	1793: "ID_RANK_TIERS_RESP",
	1792: "ID_RANK_SEASONREWARD_RESP",
	1699: "ID_SHOPPING_RESP",
	1698: "ID_SELF_MONEY_RESP",
	1697: "ID_AD_REWARD_RESP",
}
var GC_value = map[string]int32{
	"GC_ID_ZERO":                 0,
	"ID_PONG":                    1999,
	"ID_GUEST_LOGIN_RESP":        1998,
	"ID_MATCH_BEGIN_RESP":        1997,
	"ID_MATCH_QUERY_RESP":        1996,
	"ID_MATCH_REWARD_RESP":       1995,
	"ID_SIGNIN_VIEW_RESP":        1994,
	"ID_SIGNIN_RESP":             1993,
	"ID_NICK_SET_RESP":           1992,
	"ID_ZONE_LIST_RESP":          1991,
	"ID_ZONE_SET_RESP":           1990,
	"ID_MATCH_END_RESP":          1989,
	"ID_MATCH_REPEAT_STATE_RESP": 1988,
	"ID_INVITE_CODE_RESP":        1979,
	"ID_HEART_BEAT_RESP":         1978,
	"ID_IAP_VERIFY_RESP":         1920,
	"ID_CDKEY_EXCHANGE_RESP":     1919,
	"ID_RANK_BEGIN_RESP":         1799,
	"ID_RANK_QUERY_RESP":         1798,
	"ID_RANK_REWARD_RESP":        1797,
	"ID_RANK_CANCEL_RESP":        1796,
	"ID_RANK_INFO_RESP":          1795,
	"ID_RANK_SELF_RESP":          1794,
	"ID_RANK_TIERS_RESP":         1793,
	"ID_RANK_SEASONREWARD_RESP":  1792,
	"ID_SHOPPING_RESP":           1699,
	"ID_SELF_MONEY_RESP":         1698,
	"ID_AD_REWARD_RESP":          1697,
}

func (x GC) String() string {
	return proto.EnumName(GC_name, int32(x))
}
func (GC) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterEnum("fat.CG", CG_name, CG_value)
	proto.RegisterEnum("fat.GC", GC_name, GC_value)
}

func init() { proto.RegisterFile("id.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 603 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0xc9, 0x6e, 0xd4, 0x40,
	0x10, 0x86, 0x51, 0x02, 0x38, 0x53, 0x64, 0xec, 0x4a, 0x67, 0x81, 0x04, 0x09, 0xee, 0x39, 0x70,
	0xe1, 0x09, 0x3a, 0x76, 0xc5, 0xd3, 0xca, 0xa4, 0x3d, 0xd8, 0x4e, 0xc2, 0x70, 0x69, 0x81, 0x10,
	0x12, 0xa7, 0x20, 0x94, 0x07, 0x60, 0xe7, 0x09, 0x80, 0x33, 0xf0, 0x04, 0xac, 0x49, 0xe0, 0xca,
	0xbe, 0xbe, 0x06, 0xfb, 0x7a, 0x05, 0x81, 0xc6, 0xd5, 0x3d, 0xe3, 0x56, 0x72, 0xfd, 0xfe, 0x72,
	0x57, 0x75, 0xf5, 0x27, 0xc3, 0xc8, 0xe9, 0x93, 0x87, 0xce, 0x9c, 0x5d, 0x5d, 0x5b, 0x15, 0xc3,
	0xa7, 0x8e, 0xaf, 0xcd, 0xae, 0xef, 0x84, 0xa1, 0x38, 0x15, 0x21, 0x40, 0x9c, 0x1a, 0x95, 0x98,
	0x63, 0x94, 0x67, 0xb8, 0x43, 0x8c, 0x42, 0xa0, 0x12, 0xd3, 0x51, 0x3a, 0xc5, 0x0f, 0x81, 0x18,
	0x87, 0x50, 0x25, 0x26, 0x5d, 0xa2, 0xa2, 0x34, 0xed, 0x2c, 0x55, 0x1a, 0x3f, 0x3a, 0xb8, 0x28,
	0xcb, 0xb8, 0x65, 0xe6, 0xa8, 0x07, 0x3f, 0xf9, 0xf0, 0xc8, 0x12, 0xe5, 0x5d, 0xfc, 0x1c, 0x88,
	0x09, 0x88, 0xfa, 0x30, 0xa7, 0x15, 0x99, 0x27, 0xf8, 0xc5, 0x95, 0x16, 0x2a, 0xd5, 0x4a, 0x9b,
	0x65, 0x45, 0x2b, 0xf8, 0x35, 0x10, 0x21, 0x34, 0xfa, 0x10, 0xbf, 0x05, 0x02, 0x61, 0x8f, 0x4a,
	0x8c, 0x56, 0xf1, 0x82, 0x29, 0xa8, 0xc4, 0xef, 0x81, 0x18, 0x83, 0xd1, 0xde, 0x98, 0x99, 0x26,
	0xd3, 0x56, 0x45, 0x89, 0x3f, 0x5c, 0x51, 0x85, 0x7a, 0x45, 0x3f, 0x5d, 0x11, 0x77, 0x24, 0x9d,
	0xe0, 0xaf, 0x40, 0xcc, 0xc0, 0x64, 0x6d, 0x88, 0x0e, 0xc9, 0xd2, 0x14, 0xa5, 0x2c, 0x09, 0x7f,
	0xbb, 0x51, 0x94, 0x5e, 0x56, 0x25, 0x99, 0x38, 0x4b, 0x08, 0xff, 0x04, 0x42, 0x40, 0x53, 0x25,
	0xa6, 0x45, 0x32, 0x2f, 0xcd, 0x1c, 0xc9, 0x12, 0xff, 0x3a, 0xa6, 0x64, 0xc7, 0x2c, 0x53, 0xae,
	0xe6, 0xbb, 0xb8, 0x31, 0x22, 0xa6, 0x60, 0x4c, 0x25, 0x26, 0x4e, 0x16, 0xa8, 0x6b, 0xe8, 0x68,
	0xdc, 0x92, 0x3a, 0x25, 0xdc, 0x1c, 0xb1, 0xb5, 0xb9, 0xd4, 0x0b, 0x76, 0x3d, 0x77, 0x1a, 0x75,
	0xc6, 0xdb, 0xb9, 0xdb, 0xb0, 0xcd, 0x2b, 0x66, 0x97, 0x73, 0xcf, 0x83, 0xb1, 0xd4, 0x31, 0xb5,
	0xf1, 0x7e, 0xc3, 0xde, 0xaa, 0x82, 0x4a, 0xcf, 0x67, 0xf8, 0xc0, 0x43, 0x05, 0xb5, 0xe7, 0xf1,
	0xa1, 0xd7, 0xa3, 0x54, 0x94, 0x17, 0xb8, 0xde, 0x10, 0xd3, 0x30, 0x31, 0x28, 0x93, 0x45, 0xa6,
	0x6d, 0xa7, 0x8d, 0x86, 0x5d, 0x5e, 0xd1, 0xca, 0x3a, 0xd5, 0x6b, 0x5f, 0x03, 0x7b, 0x40, 0xef,
	0x38, 0xb3, 0x98, 0x69, 0xea, 0xe2, 0x75, 0xb0, 0x7d, 0x64, 0xe2, 0x46, 0xbc, 0x01, 0xb3, 0x9b,
	0xbb, 0x60, 0x28, 0x8d, 0x7b, 0xe6, 0xa4, 0xf1, 0x56, 0x73, 0x32, 0x9d, 0xe2, 0xfb, 0x48, 0xec,
	0x83, 0x71, 0xdf, 0x1c, 0x93, 0x53, 0xd1, 0xc1, 0x77, 0x2e, 0xa9, 0xe9, 0xc3, 0xc9, 0x5b, 0x3f,
	0xa9, 0xb6, 0xc4, 0xc9, 0x9b, 0xc8, 0x5e, 0xa3, 0x2e, 0x12, 0x47, 0xaf, 0xdd, 0x47, 0x35, 0x9b,
	0x38, 0x79, 0x15, 0xf9, 0x9e, 0x55, 0xf0, 0x65, 0x24, 0x26, 0x01, 0x6b, 0x5e, 0x31, 0x7e, 0x11,
	0xd9, 0xb7, 0xec, 0xcb, 0xc5, 0xfc, 0xb9, 0x2b, 0x77, 0x86, 0x31, 0x7e, 0xe6, 0xca, 0xfb, 0x9a,
	0x31, 0x7f, 0x1a, 0x89, 0x83, 0x30, 0xb3, 0xad, 0x6b, 0x5c, 0xf0, 0xc4, 0x4d, 0x5b, 0x13, 0x8e,
	0x93, 0xc7, 0x91, 0xd8, 0x0b, 0xc2, 0xb3, 0x8e, 0x83, 0x47, 0x2e, 0x18, 0xa8, 0xc7, 0xc1, 0xb9,
	0x48, 0xec, 0x87, 0xa9, 0x2d, 0xfe, 0x71, 0xf8, 0x2f, 0xb4, 0x5f, 0x0d, 0x24, 0xe4, 0xe0, 0xaa,
	0x17, 0xd4, 0x76, 0x7c, 0x25, 0xb4, 0xa3, 0xd5, 0x74, 0xe4, 0xe4, 0xb2, 0x97, 0xb0, 0x93, 0x9c,
	0x5c, 0x0a, 0xed, 0x1e, 0xfa, 0x62, 0x32, 0xbf, 0xe8, 0xf1, 0x4a, 0xa7, 0x8a, 0x5f, 0xf0, 0x9a,
	0x57, 0x8a, 0x72, 0x70, 0x3e, 0x14, 0x07, 0x60, 0x7a, 0x3b, 0x4f, 0xed, 0x5d, 0x43, 0xfb, 0x0e,
	0x4e, 0x56, 0xc6, 0xb7, 0x9b, 0xf6, 0xbc, 0x81, 0xb1, 0x1c, 0xdc, 0x6a, 0xda, 0x01, 0xfa, 0xda,
	0x32, 0xbf, 0xd9, 0x9c, 0x1b, 0x6a, 0x0d, 0x9f, 0xd8, 0x5d, 0xfd, 0x05, 0x0f, 0xff, 0x0f, 0x00,
	0x00, 0xff, 0xff, 0xcc, 0x57, 0xf5, 0x74, 0x11, 0x05, 0x00, 0x00,
}
