// Code generated by protoc-gen-go.
// source: fat.proto
// DO NOT EDIT!

package fat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Error struct {
	Code int32    `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Args []string `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type Ping struct {
	Sample uint32 `protobuf:"fixed32,1,opt,name=sample" json:"sample,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type Pong struct {
	Sample uint32 `protobuf:"fixed32,1,opt,name=sample" json:"sample,omitempty"`
	Delay  uint32 `protobuf:"fixed32,2,opt,name=delay" json:"delay,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type Resource struct {
	Id    int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Value int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *Resource) Reset()                    { *m = Resource{} }
func (m *Resource) String() string            { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()               {}
func (*Resource) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

// 使用皮肤胜场进度
type SkinWinData struct {
	SkinId int32 `protobuf:"varint,1,opt,name=skin_id,json=skinId" json:"skin_id,omitempty"`
	WinNum int32 `protobuf:"varint,2,opt,name=win_num,json=winNum" json:"win_num,omitempty"`
}

func (m *SkinWinData) Reset()                    { *m = SkinWinData{} }
func (m *SkinWinData) String() string            { return proto.CompactTextString(m) }
func (*SkinWinData) ProtoMessage()               {}
func (*SkinWinData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

// 活动信息
type Activity struct {
	ActId       int32          `protobuf:"varint,1,opt,name=act_id,json=actId" json:"act_id,omitempty"`
	EndTime     int32          `protobuf:"varint,3,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	SkinWinData []*SkinWinData `protobuf:"bytes,2,rep,name=skin_win_data,json=skinWinData" json:"skin_win_data,omitempty"`
}

func (m *Activity) Reset()                    { *m = Activity{} }
func (m *Activity) String() string            { return proto.CompactTextString(m) }
func (*Activity) ProtoMessage()               {}
func (*Activity) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *Activity) GetSkinWinData() []*SkinWinData {
	if m != nil {
		return m.SkinWinData
	}
	return nil
}

type Profile struct {
	Nick              string      `protobuf:"bytes,1,opt,name=nick" json:"nick,omitempty"`
	Skins             []int32     `protobuf:"varint,2,rep,packed,name=skins" json:"skins,omitempty"`
	Newbie            bool        `protobuf:"varint,3,opt,name=newbie" json:"newbie,omitempty"`
	Win               int32       `protobuf:"varint,4,opt,name=win" json:"win,omitempty"`
	RemoveAd          bool        `protobuf:"varint,5,opt,name=remove_ad,json=removeAd" json:"remove_ad,omitempty"`
	Activity          []*Activity `protobuf:"bytes,7,rep,name=activity" json:"activity,omitempty"`
	AdReward          bool        `protobuf:"varint,8,opt,name=ad_reward,json=adReward" json:"ad_reward,omitempty"`
	RemainAdRewardSec int32       `protobuf:"varint,9,opt,name=remain_ad_reward_sec,json=remainAdRewardSec" json:"remain_ad_reward_sec,omitempty"`
	WinRewardNum      int32       `protobuf:"varint,10,opt,name=win_reward_num,json=winRewardNum" json:"win_reward_num,omitempty"`
	WinRewardCount    int32       `protobuf:"varint,11,opt,name=win_reward_count,json=winRewardCount" json:"win_reward_count,omitempty"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *Profile) GetActivity() []*Activity {
	if m != nil {
		return m.Activity
	}
	return nil
}

// 版本更新提醒
type VersionUpdateAlert struct {
	Force   bool   `protobuf:"varint,1,opt,name=force" json:"force,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Link    string `protobuf:"bytes,3,opt,name=link" json:"link,omitempty"`
}

func (m *VersionUpdateAlert) Reset()                    { *m = VersionUpdateAlert{} }
func (m *VersionUpdateAlert) String() string            { return proto.CompactTextString(m) }
func (*VersionUpdateAlert) ProtoMessage()               {}
func (*VersionUpdateAlert) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

type Announcement struct {
	Force bool   `protobuf:"varint,1,opt,name=force" json:"force,omitempty"`
	Url   string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Link  string `protobuf:"bytes,3,opt,name=link" json:"link,omitempty"`
}

func (m *Announcement) Reset()                    { *m = Announcement{} }
func (m *Announcement) String() string            { return proto.CompactTextString(m) }
func (*Announcement) ProtoMessage()               {}
func (*Announcement) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

type InviteCodeReq struct {
	InviteCode string `protobuf:"bytes,1,opt,name=invite_code,json=inviteCode" json:"invite_code,omitempty"`
}

func (m *InviteCodeReq) Reset()                    { *m = InviteCodeReq{} }
func (m *InviteCodeReq) String() string            { return proto.CompactTextString(m) }
func (*InviteCodeReq) ProtoMessage()               {}
func (*InviteCodeReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

type InviteCodeResp struct {
	Err *Error `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *InviteCodeResp) Reset()                    { *m = InviteCodeResp{} }
func (m *InviteCodeResp) String() string            { return proto.CompactTextString(m) }
func (*InviteCodeResp) ProtoMessage()               {}
func (*InviteCodeResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *InviteCodeResp) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

// 设备号登陆
type GuestLogin struct {
	Imei          string `protobuf:"bytes,1,opt,name=imei" json:"imei,omitempty"`
	Os            int32  `protobuf:"varint,2,opt,name=os" json:"os,omitempty"`
	ClientVersion string `protobuf:"bytes,3,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	Channel       string `protobuf:"bytes,4,opt,name=channel" json:"channel,omitempty"`
	Language      int32  `protobuf:"varint,5,opt,name=language" json:"language,omitempty"`
	FysdkToken    string `protobuf:"bytes,6,opt,name=fysdk_token,json=fysdkToken" json:"fysdk_token,omitempty"`
	FysdkUuid     string `protobuf:"bytes,7,opt,name=fysdk_uuid,json=fysdkUuid" json:"fysdk_uuid,omitempty"`
}

func (m *GuestLogin) Reset()                    { *m = GuestLogin{} }
func (m *GuestLogin) String() string            { return proto.CompactTextString(m) }
func (*GuestLogin) ProtoMessage()               {}
func (*GuestLogin) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

type Tiers struct {
	Tiers   int32 `protobuf:"varint,1,opt,name=tiers" json:"tiers,omitempty"`
	Grading int32 `protobuf:"varint,2,opt,name=grading" json:"grading,omitempty"`
	Star    int32 `protobuf:"varint,3,opt,name=star" json:"star,omitempty"`
	Rank    int32 `protobuf:"varint,4,opt,name=rank" json:"rank,omitempty"`
}

func (m *Tiers) Reset()                    { *m = Tiers{} }
func (m *Tiers) String() string            { return proto.CompactTextString(m) }
func (*Tiers) ProtoMessage()               {}
func (*Tiers) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

type Money struct {
	Gold          int32 `protobuf:"varint,1,opt,name=gold" json:"gold,omitempty"`
	Diamond       int32 `protobuf:"varint,2,opt,name=diamond" json:"diamond,omitempty"`
	FirstRecharge bool  `protobuf:"varint,3,opt,name=first_recharge,json=firstRecharge" json:"first_recharge,omitempty"`
}

func (m *Money) Reset()                    { *m = Money{} }
func (m *Money) String() string            { return proto.CompactTextString(m) }
func (*Money) ProtoMessage()               {}
func (*Money) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

// 游客登录反馈
type GuestLoginResp struct {
	Err                *Error              `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
	Uid                uint32              `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	Token              []byte              `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Profile            *Profile            `protobuf:"bytes,4,opt,name=profile" json:"profile,omitempty"`
	Update             *VersionUpdateAlert `protobuf:"bytes,5,opt,name=update" json:"update,omitempty"`
	Announcements      []*Announcement     `protobuf:"bytes,6,rep,name=announcements" json:"announcements,omitempty"`
	Tiers              *Tiers              `protobuf:"bytes,7,opt,name=tiers" json:"tiers,omitempty"`
	Money              *Money              `protobuf:"bytes,8,opt,name=money" json:"money,omitempty"`
	NeedInvitationCode bool                `protobuf:"varint,9,opt,name=need_invitation_code,json=needInvitationCode" json:"need_invitation_code,omitempty"`
}

func (m *GuestLoginResp) Reset()                    { *m = GuestLoginResp{} }
func (m *GuestLoginResp) String() string            { return proto.CompactTextString(m) }
func (*GuestLoginResp) ProtoMessage()               {}
func (*GuestLoginResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *GuestLoginResp) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GuestLoginResp) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *GuestLoginResp) GetUpdate() *VersionUpdateAlert {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *GuestLoginResp) GetAnnouncements() []*Announcement {
	if m != nil {
		return m.Announcements
	}
	return nil
}

func (m *GuestLoginResp) GetTiers() *Tiers {
	if m != nil {
		return m.Tiers
	}
	return nil
}

func (m *GuestLoginResp) GetMoney() *Money {
	if m != nil {
		return m.Money
	}
	return nil
}

type NickSet struct {
	Nick string `protobuf:"bytes,1,opt,name=nick" json:"nick,omitempty"`
	Lang uint32 `protobuf:"varint,2,opt,name=lang" json:"lang,omitempty"`
}

func (m *NickSet) Reset()                    { *m = NickSet{} }
func (m *NickSet) String() string            { return proto.CompactTextString(m) }
func (*NickSet) ProtoMessage()               {}
func (*NickSet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

type NickSetResp struct {
	Err *Error `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *NickSetResp) Reset()                    { *m = NickSetResp{} }
func (m *NickSetResp) String() string            { return proto.CompactTextString(m) }
func (*NickSetResp) ProtoMessage()               {}
func (*NickSetResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *NickSetResp) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type MatchBegin struct {
	Skin     int32 `protobuf:"varint,1,opt,name=skin" json:"skin,omitempty"`
	Lag      int32 `protobuf:"varint,2,opt,name=lag" json:"lag,omitempty"`
	RoomCode int32 `protobuf:"varint,3,opt,name=room_code,json=roomCode" json:"room_code,omitempty"`
	IsAgain  bool  `protobuf:"varint,4,opt,name=is_again,json=isAgain" json:"is_again,omitempty"`
}

func (m *MatchBegin) Reset()                    { *m = MatchBegin{} }
func (m *MatchBegin) String() string            { return proto.CompactTextString(m) }
func (*MatchBegin) ProtoMessage()               {}
func (*MatchBegin) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

type MatchBeginResp struct {
	Err          *Error `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
	FriendStatus int32  `protobuf:"varint,1,opt,name=friend_status,json=friendStatus" json:"friend_status,omitempty"`
}

func (m *MatchBeginResp) Reset()                    { *m = MatchBeginResp{} }
func (m *MatchBeginResp) String() string            { return proto.CompactTextString(m) }
func (*MatchBeginResp) ProtoMessage()               {}
func (*MatchBeginResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *MatchBeginResp) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type MatchQuery struct {
}

func (m *MatchQuery) Reset()                    { *m = MatchQuery{} }
func (m *MatchQuery) String() string            { return proto.CompactTextString(m) }
func (*MatchQuery) ProtoMessage()               {}
func (*MatchQuery) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

type MatchQueryResp struct {
	Status      int32  `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	MyPosition  int32  `protobuf:"varint,2,opt,name=my_position,json=myPosition" json:"my_position,omitempty"`
	RoomId      uint32 `protobuf:"varint,3,opt,name=room_id,json=roomId" json:"room_id,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	OpponentUid uint32 `protobuf:"varint,5,opt,name=opponent_uid,json=opponentUid" json:"opponent_uid,omitempty"`
	Win         int32  `protobuf:"varint,6,opt,name=win" json:"win,omitempty"`
	Skin        int32  `protobuf:"varint,7,opt,name=skin" json:"skin,omitempty"`
	MainVice    int32  `protobuf:"varint,8,opt,name=mainVice" json:"mainVice,omitempty"`
	VsAi        int32  `protobuf:"varint,9,opt,name=vs_ai,json=vsAi" json:"vs_ai,omitempty"`
}

func (m *MatchQueryResp) Reset()                    { *m = MatchQueryResp{} }
func (m *MatchQueryResp) String() string            { return proto.CompactTextString(m) }
func (*MatchQueryResp) ProtoMessage()               {}
func (*MatchQueryResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

type OpponentInfo struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	OpponentUid uint32 `protobuf:"varint,2,opt,name=opponent_uid,json=opponentUid" json:"opponent_uid,omitempty"`
	Win         int32  `protobuf:"varint,3,opt,name=win" json:"win,omitempty"`
	Skin        int32  `protobuf:"varint,4,opt,name=skin" json:"skin,omitempty"`
}

func (m *OpponentInfo) Reset()                    { *m = OpponentInfo{} }
func (m *OpponentInfo) String() string            { return proto.CompactTextString(m) }
func (*OpponentInfo) ProtoMessage()               {}
func (*OpponentInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

type MatchMemberDetail struct {
	Uid uint32 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Hp  int32  `protobuf:"varint,2,opt,name=hp" json:"hp,omitempty"`
}

func (m *MatchMemberDetail) Reset()                    { *m = MatchMemberDetail{} }
func (m *MatchMemberDetail) String() string            { return proto.CompactTextString(m) }
func (*MatchMemberDetail) ProtoMessage()               {}
func (*MatchMemberDetail) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

type MatchReward struct {
	RoomId  uint32               `protobuf:"varint,1,opt,name=room_id,json=roomId" json:"room_id,omitempty"`
	Result  int32                `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
	Details []*MatchMemberDetail `protobuf:"bytes,3,rep,name=details" json:"details,omitempty"`
	VsAi    int32                `protobuf:"varint,4,opt,name=vs_ai,json=vsAi" json:"vs_ai,omitempty"`
}

func (m *MatchReward) Reset()                    { *m = MatchReward{} }
func (m *MatchReward) String() string            { return proto.CompactTextString(m) }
func (*MatchReward) ProtoMessage()               {}
func (*MatchReward) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *MatchReward) GetDetails() []*MatchMemberDetail {
	if m != nil {
		return m.Details
	}
	return nil
}

type MatchTaskReward struct {
	Id        int32       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Resources []*Resource `protobuf:"bytes,2,rep,name=resources" json:"resources,omitempty"`
}

func (m *MatchTaskReward) Reset()                    { *m = MatchTaskReward{} }
func (m *MatchTaskReward) String() string            { return proto.CompactTextString(m) }
func (*MatchTaskReward) ProtoMessage()               {}
func (*MatchTaskReward) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *MatchTaskReward) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

type MatchRewardResp struct {
	Err            *Error             `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
	Win            int32              `protobuf:"varint,2,opt,name=win" json:"win,omitempty"`
	Tasks          []*MatchTaskReward `protobuf:"bytes,3,rep,name=tasks" json:"tasks,omitempty"`
	SkinWinData    *SkinWinData       `protobuf:"bytes,4,opt,name=skin_win_data,json=skinWinData" json:"skin_win_data,omitempty"`
	Money          *Money             `protobuf:"bytes,5,opt,name=money" json:"money,omitempty"`
	WinRewardNum   int32              `protobuf:"varint,6,opt,name=winRewardNum" json:"winRewardNum,omitempty"`
	WinRewardCount int32              `protobuf:"varint,7,opt,name=win_reward_count,json=winRewardCount" json:"win_reward_count,omitempty"`
}

func (m *MatchRewardResp) Reset()                    { *m = MatchRewardResp{} }
func (m *MatchRewardResp) String() string            { return proto.CompactTextString(m) }
func (*MatchRewardResp) ProtoMessage()               {}
func (*MatchRewardResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *MatchRewardResp) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *MatchRewardResp) GetTasks() []*MatchTaskReward {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *MatchRewardResp) GetSkinWinData() *SkinWinData {
	if m != nil {
		return m.SkinWinData
	}
	return nil
}

func (m *MatchRewardResp) GetMoney() *Money {
	if m != nil {
		return m.Money
	}
	return nil
}

type SigninViewResp struct {
	Err *Error `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
	Id  int32  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Sec int32  `protobuf:"varint,3,opt,name=sec" json:"sec,omitempty"`
}

func (m *SigninViewResp) Reset()                    { *m = SigninViewResp{} }
func (m *SigninViewResp) String() string            { return proto.CompactTextString(m) }
func (*SigninViewResp) ProtoMessage()               {}
func (*SigninViewResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

func (m *SigninViewResp) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type SigninForm struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *SigninForm) Reset()                    { *m = SigninForm{} }
func (m *SigninForm) String() string            { return proto.CompactTextString(m) }
func (*SigninForm) ProtoMessage()               {}
func (*SigninForm) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{28} }

type SigninResp struct {
	Err       *Error      `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
	Id        int32       `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	NextId    int32       `protobuf:"varint,3,opt,name=next_id,json=nextId" json:"next_id,omitempty"`
	NextSec   int32       `protobuf:"varint,4,opt,name=next_sec,json=nextSec" json:"next_sec,omitempty"`
	Resources []*Resource `protobuf:"bytes,5,rep,name=resources" json:"resources,omitempty"`
}

func (m *SigninResp) Reset()                    { *m = SigninResp{} }
func (m *SigninResp) String() string            { return proto.CompactTextString(m) }
func (*SigninResp) ProtoMessage()               {}
func (*SigninResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

func (m *SigninResp) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *SigninResp) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

type ZoneListResp struct {
	Err   *Error   `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
	Ids   []string `protobuf:"bytes,2,rep,name=ids" json:"ids,omitempty"`
	Addrs []string `protobuf:"bytes,3,rep,name=addrs" json:"addrs,omitempty"`
}

func (m *ZoneListResp) Reset()                    { *m = ZoneListResp{} }
func (m *ZoneListResp) String() string            { return proto.CompactTextString(m) }
func (*ZoneListResp) ProtoMessage()               {}
func (*ZoneListResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{30} }

func (m *ZoneListResp) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type ZoneSet struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ZoneSet) Reset()                    { *m = ZoneSet{} }
func (m *ZoneSet) String() string            { return proto.CompactTextString(m) }
func (*ZoneSet) ProtoMessage()               {}
func (*ZoneSet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{31} }

type ZoneSetResp struct {
	Err *Error `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *ZoneSetResp) Reset()                    { *m = ZoneSetResp{} }
func (m *ZoneSetResp) String() string            { return proto.CompactTextString(m) }
func (*ZoneSetResp) ProtoMessage()               {}
func (*ZoneSetResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{32} }

func (m *ZoneSetResp) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

// IAP支付验证表单
type IAPVerifyForm struct {
	Receipt string `protobuf:"bytes,1,opt,name=receipt" json:"receipt,omitempty"`
}

func (m *IAPVerifyForm) Reset()                    { *m = IAPVerifyForm{} }
func (m *IAPVerifyForm) String() string            { return proto.CompactTextString(m) }
func (*IAPVerifyForm) ProtoMessage()               {}
func (*IAPVerifyForm) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{33} }

type IAPVerifyResp struct {
	Err       *Error      `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
	Id        uint32      `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Resources []*Resource `protobuf:"bytes,3,rep,name=resources" json:"resources,omitempty"`
	RemoveAd  bool        `protobuf:"varint,4,opt,name=remove_ad,json=removeAd" json:"remove_ad,omitempty"`
	Money     *Money      `protobuf:"bytes,5,opt,name=money" json:"money,omitempty"`
}

func (m *IAPVerifyResp) Reset()                    { *m = IAPVerifyResp{} }
func (m *IAPVerifyResp) String() string            { return proto.CompactTextString(m) }
func (*IAPVerifyResp) ProtoMessage()               {}
func (*IAPVerifyResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{34} }

func (m *IAPVerifyResp) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *IAPVerifyResp) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *IAPVerifyResp) GetMoney() *Money {
	if m != nil {
		return m.Money
	}
	return nil
}

// 是否对方有请求再战
type MatchRepeatState struct {
	RoomCode uint32 `protobuf:"varint,1,opt,name=room_code,json=roomCode" json:"room_code,omitempty"`
}

func (m *MatchRepeatState) Reset()                    { *m = MatchRepeatState{} }
func (m *MatchRepeatState) String() string            { return proto.CompactTextString(m) }
func (*MatchRepeatState) ProtoMessage()               {}
func (*MatchRepeatState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{35} }

type MatchRepeatStateResp struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *MatchRepeatStateResp) Reset()                    { *m = MatchRepeatStateResp{} }
func (m *MatchRepeatStateResp) String() string            { return proto.CompactTextString(m) }
func (*MatchRepeatStateResp) ProtoMessage()               {}
func (*MatchRepeatStateResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{36} }

// 取消寻找比赛,或拒绝再战
type MatchEnd struct {
	RoomCode uint32 `protobuf:"varint,1,opt,name=room_code,json=roomCode" json:"room_code,omitempty"`
}

func (m *MatchEnd) Reset()                    { *m = MatchEnd{} }
func (m *MatchEnd) String() string            { return proto.CompactTextString(m) }
func (*MatchEnd) ProtoMessage()               {}
func (*MatchEnd) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{37} }

type MatchEndResp struct {
	Err *Error `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *MatchEndResp) Reset()                    { *m = MatchEndResp{} }
func (m *MatchEndResp) String() string            { return proto.CompactTextString(m) }
func (*MatchEndResp) ProtoMessage()               {}
func (*MatchEndResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{38} }

func (m *MatchEndResp) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

// 开始排位匹配
type RankBegin struct {
	Skin int32 `protobuf:"varint,1,opt,name=skin" json:"skin,omitempty"`
}

func (m *RankBegin) Reset()                    { *m = RankBegin{} }
func (m *RankBegin) String() string            { return proto.CompactTextString(m) }
func (*RankBegin) ProtoMessage()               {}
func (*RankBegin) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{39} }

type RankBeginResp struct {
	Status  int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Suspend int32 `protobuf:"varint,2,opt,name=suspend" json:"suspend,omitempty"`
}

func (m *RankBeginResp) Reset()                    { *m = RankBeginResp{} }
func (m *RankBeginResp) String() string            { return proto.CompactTextString(m) }
func (*RankBeginResp) ProtoMessage()               {}
func (*RankBeginResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{40} }

// 查询排位匹配结果
type RankQuery struct {
}

func (m *RankQuery) Reset()                    { *m = RankQuery{} }
func (m *RankQuery) String() string            { return proto.CompactTextString(m) }
func (*RankQuery) ProtoMessage()               {}
func (*RankQuery) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{41} }

type RankQueryResp struct {
	Status     int32     `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	RoomId     uint32    `protobuf:"varint,2,opt,name=room_id,json=roomId" json:"room_id,omitempty"`
	MainEngine bool      `protobuf:"varint,3,opt,name=main_engine,json=mainEngine" json:"main_engine,omitempty"`
	Left       bool      `protobuf:"varint,4,opt,name=left" json:"left,omitempty"`
	Rival      *RankUser `protobuf:"bytes,5,opt,name=rival" json:"rival,omitempty"`
	RoomUid    uint32    `protobuf:"varint,6,opt,name=room_uid,json=roomUid" json:"room_uid,omitempty"`
}

func (m *RankQueryResp) Reset()                    { *m = RankQueryResp{} }
func (m *RankQueryResp) String() string            { return proto.CompactTextString(m) }
func (*RankQueryResp) ProtoMessage()               {}
func (*RankQueryResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{42} }

func (m *RankQueryResp) GetRival() *RankUser {
	if m != nil {
		return m.Rival
	}
	return nil
}

type RankUser struct {
	Tiers *Tiers `protobuf:"bytes,1,opt,name=tiers" json:"tiers,omitempty"`
	Uid   uint32 `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	Nick  string `protobuf:"bytes,3,opt,name=nick" json:"nick,omitempty"`
	Skin  int32  `protobuf:"varint,4,opt,name=skin" json:"skin,omitempty"`
}

func (m *RankUser) Reset()                    { *m = RankUser{} }
func (m *RankUser) String() string            { return proto.CompactTextString(m) }
func (*RankUser) ProtoMessage()               {}
func (*RankUser) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{43} }

func (m *RankUser) GetTiers() *Tiers {
	if m != nil {
		return m.Tiers
	}
	return nil
}

// 排位比赛结果
type RankReward struct {
	RoomUid uint32 `protobuf:"varint,1,opt,name=room_uid,json=roomUid" json:"room_uid,omitempty"`
	Result  int64  `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
}

func (m *RankReward) Reset()                    { *m = RankReward{} }
func (m *RankReward) String() string            { return proto.CompactTextString(m) }
func (*RankReward) ProtoMessage()               {}
func (*RankReward) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{44} }

type RankRewardResp struct {
	Ok             bool               `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Tiers          *Tiers             `protobuf:"bytes,2,opt,name=tiers" json:"tiers,omitempty"`
	Tasks          []*MatchTaskReward `protobuf:"bytes,3,rep,name=tasks" json:"tasks,omitempty"`
	SkinWinData    *SkinWinData       `protobuf:"bytes,4,opt,name=skin_win_data,json=skinWinData" json:"skin_win_data,omitempty"`
	Win            int32              `protobuf:"varint,5,opt,name=win" json:"win,omitempty"`
	Money          *Money             `protobuf:"bytes,6,opt,name=money" json:"money,omitempty"`
	WinRewardNum   int32              `protobuf:"varint,7,opt,name=winRewardNum" json:"winRewardNum,omitempty"`
	WinRewardCount int32              `protobuf:"varint,8,opt,name=win_reward_count,json=winRewardCount" json:"win_reward_count,omitempty"`
}

func (m *RankRewardResp) Reset()                    { *m = RankRewardResp{} }
func (m *RankRewardResp) String() string            { return proto.CompactTextString(m) }
func (*RankRewardResp) ProtoMessage()               {}
func (*RankRewardResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{45} }

func (m *RankRewardResp) GetTiers() *Tiers {
	if m != nil {
		return m.Tiers
	}
	return nil
}

func (m *RankRewardResp) GetTasks() []*MatchTaskReward {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *RankRewardResp) GetSkinWinData() *SkinWinData {
	if m != nil {
		return m.SkinWinData
	}
	return nil
}

func (m *RankRewardResp) GetMoney() *Money {
	if m != nil {
		return m.Money
	}
	return nil
}

// 排位匹配队列取消
type RankCancel struct {
}

func (m *RankCancel) Reset()                    { *m = RankCancel{} }
func (m *RankCancel) String() string            { return proto.CompactTextString(m) }
func (*RankCancel) ProtoMessage()               {}
func (*RankCancel) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{46} }

type RankCancelResp struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *RankCancelResp) Reset()                    { *m = RankCancelResp{} }
func (m *RankCancelResp) String() string            { return proto.CompactTextString(m) }
func (*RankCancelResp) ProtoMessage()               {}
func (*RankCancelResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{47} }

// 排位赛季信息
type RankInfo struct {
}

func (m *RankInfo) Reset()                    { *m = RankInfo{} }
func (m *RankInfo) String() string            { return proto.CompactTextString(m) }
func (*RankInfo) ProtoMessage()               {}
func (*RankInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{48} }

type Reward struct {
	Id  int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Num int32 `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
}

func (m *Reward) Reset()                    { *m = Reward{} }
func (m *Reward) String() string            { return proto.CompactTextString(m) }
func (*Reward) ProtoMessage()               {}
func (*Reward) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{49} }

type RankInfoResp struct {
	Status  int32     `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Season  int32     `protobuf:"varint,2,opt,name=season" json:"season,omitempty"`
	EndTime int32     `protobuf:"varint,3,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Reward  []*Reward `protobuf:"bytes,4,rep,name=reward" json:"reward,omitempty"`
}

func (m *RankInfoResp) Reset()                    { *m = RankInfoResp{} }
func (m *RankInfoResp) String() string            { return proto.CompactTextString(m) }
func (*RankInfoResp) ProtoMessage()               {}
func (*RankInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{50} }

func (m *RankInfoResp) GetReward() []*Reward {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 获取自己的排位等级信息
type RankSelf struct {
}

func (m *RankSelf) Reset()                    { *m = RankSelf{} }
func (m *RankSelf) String() string            { return proto.CompactTextString(m) }
func (*RankSelf) ProtoMessage()               {}
func (*RankSelf) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{51} }

type CombatGains struct {
	Win  int32 `protobuf:"varint,1,opt,name=win" json:"win,omitempty"`
	Lose int32 `protobuf:"varint,2,opt,name=lose" json:"lose,omitempty"`
	Draw int32 `protobuf:"varint,3,opt,name=draw" json:"draw,omitempty"`
}

func (m *CombatGains) Reset()                    { *m = CombatGains{} }
func (m *CombatGains) String() string            { return proto.CompactTextString(m) }
func (*CombatGains) ProtoMessage()               {}
func (*CombatGains) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{52} }

type RankSelfResp struct {
	Ok    bool         `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Tiers *Tiers       `protobuf:"bytes,2,opt,name=tiers" json:"tiers,omitempty"`
	Gains *CombatGains `protobuf:"bytes,3,opt,name=gains" json:"gains,omitempty"`
}

func (m *RankSelfResp) Reset()                    { *m = RankSelfResp{} }
func (m *RankSelfResp) String() string            { return proto.CompactTextString(m) }
func (*RankSelfResp) ProtoMessage()               {}
func (*RankSelfResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{53} }

func (m *RankSelfResp) GetTiers() *Tiers {
	if m != nil {
		return m.Tiers
	}
	return nil
}

func (m *RankSelfResp) GetGains() *CombatGains {
	if m != nil {
		return m.Gains
	}
	return nil
}

// 获取排位段位表
type RankTiers struct {
}

func (m *RankTiers) Reset()                    { *m = RankTiers{} }
func (m *RankTiers) String() string            { return proto.CompactTextString(m) }
func (*RankTiers) ProtoMessage()               {}
func (*RankTiers) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{54} }

type RankTiersResp struct {
	TableJson string `protobuf:"bytes,1,opt,name=table_json,json=tableJson" json:"table_json,omitempty"`
}

func (m *RankTiersResp) Reset()                    { *m = RankTiersResp{} }
func (m *RankTiersResp) String() string            { return proto.CompactTextString(m) }
func (*RankTiersResp) ProtoMessage()               {}
func (*RankTiersResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{55} }

// 获取赛季奖励
type RankSeasonReward struct {
}

func (m *RankSeasonReward) Reset()                    { *m = RankSeasonReward{} }
func (m *RankSeasonReward) String() string            { return proto.CompactTextString(m) }
func (*RankSeasonReward) ProtoMessage()               {}
func (*RankSeasonReward) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{56} }

type SeasonReward struct {
	Tiers  *Tiers    `protobuf:"bytes,1,opt,name=tiers" json:"tiers,omitempty"`
	Reward []*Reward `protobuf:"bytes,2,rep,name=reward" json:"reward,omitempty"`
	Season int32     `protobuf:"varint,3,opt,name=season" json:"season,omitempty"`
}

func (m *SeasonReward) Reset()                    { *m = SeasonReward{} }
func (m *SeasonReward) String() string            { return proto.CompactTextString(m) }
func (*SeasonReward) ProtoMessage()               {}
func (*SeasonReward) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{57} }

func (m *SeasonReward) GetTiers() *Tiers {
	if m != nil {
		return m.Tiers
	}
	return nil
}

func (m *SeasonReward) GetReward() []*Reward {
	if m != nil {
		return m.Reward
	}
	return nil
}

type RankSeasonRewardResp struct {
	Ok     bool            `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Reward []*SeasonReward `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
}

func (m *RankSeasonRewardResp) Reset()                    { *m = RankSeasonRewardResp{} }
func (m *RankSeasonRewardResp) String() string            { return proto.CompactTextString(m) }
func (*RankSeasonRewardResp) ProtoMessage()               {}
func (*RankSeasonRewardResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{58} }

func (m *RankSeasonRewardResp) GetReward() []*SeasonReward {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 购买商品
type Shopping struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *Shopping) Reset()                    { *m = Shopping{} }
func (m *Shopping) String() string            { return proto.CompactTextString(m) }
func (*Shopping) ProtoMessage()               {}
func (*Shopping) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{59} }

type ShoppingResp struct {
	ErrorCode int32  `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	Money     *Money `protobuf:"bytes,2,opt,name=money" json:"money,omitempty"`
}

func (m *ShoppingResp) Reset()                    { *m = ShoppingResp{} }
func (m *ShoppingResp) String() string            { return proto.CompactTextString(m) }
func (*ShoppingResp) ProtoMessage()               {}
func (*ShoppingResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{60} }

func (m *ShoppingResp) GetMoney() *Money {
	if m != nil {
		return m.Money
	}
	return nil
}

// 查询自己的货币
type SelfMoney struct {
}

func (m *SelfMoney) Reset()                    { *m = SelfMoney{} }
func (m *SelfMoney) String() string            { return proto.CompactTextString(m) }
func (*SelfMoney) ProtoMessage()               {}
func (*SelfMoney) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{61} }

type SelfMoneyResp struct {
	Money *Money `protobuf:"bytes,1,opt,name=money" json:"money,omitempty"`
}

func (m *SelfMoneyResp) Reset()                    { *m = SelfMoneyResp{} }
func (m *SelfMoneyResp) String() string            { return proto.CompactTextString(m) }
func (*SelfMoneyResp) ProtoMessage()               {}
func (*SelfMoneyResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{62} }

func (m *SelfMoneyResp) GetMoney() *Money {
	if m != nil {
		return m.Money
	}
	return nil
}

// 看广告获取货币奖励
type ADReward struct {
}

func (m *ADReward) Reset()                    { *m = ADReward{} }
func (m *ADReward) String() string            { return proto.CompactTextString(m) }
func (*ADReward) ProtoMessage()               {}
func (*ADReward) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{63} }

type AdRewardResp struct {
	ErrorCode int32  `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	Money     *Money `protobuf:"bytes,2,opt,name=money" json:"money,omitempty"`
	AdReward  bool   `protobuf:"varint,3,opt,name=ad_reward,json=adReward" json:"ad_reward,omitempty"`
	RemainT   int32  `protobuf:"varint,4,opt,name=remain_t,json=remainT" json:"remain_t,omitempty"`
}

func (m *AdRewardResp) Reset()                    { *m = AdRewardResp{} }
func (m *AdRewardResp) String() string            { return proto.CompactTextString(m) }
func (*AdRewardResp) ProtoMessage()               {}
func (*AdRewardResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{64} }

func (m *AdRewardResp) GetMoney() *Money {
	if m != nil {
		return m.Money
	}
	return nil
}

type CDKey struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *CDKey) Reset()                    { *m = CDKey{} }
func (m *CDKey) String() string            { return proto.CompactTextString(m) }
func (*CDKey) ProtoMessage()               {}
func (*CDKey) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{65} }

type CDKeyExchangeResp struct {
	Err       *Error      `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
	Resources []*Resource `protobuf:"bytes,2,rep,name=resources" json:"resources,omitempty"`
}

func (m *CDKeyExchangeResp) Reset()                    { *m = CDKeyExchangeResp{} }
func (m *CDKeyExchangeResp) String() string            { return proto.CompactTextString(m) }
func (*CDKeyExchangeResp) ProtoMessage()               {}
func (*CDKeyExchangeResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{66} }

func (m *CDKeyExchangeResp) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *CDKeyExchangeResp) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

// 安卓支付订单通知
type PaymentNotify struct {
	Id        string      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Resources []*Resource `protobuf:"bytes,2,rep,name=resources" json:"resources,omitempty"`
	RemoveAd  bool        `protobuf:"varint,3,opt,name=remove_ad,json=removeAd" json:"remove_ad,omitempty"`
	Money     *Money      `protobuf:"bytes,4,opt,name=money" json:"money,omitempty"`
}

func (m *PaymentNotify) Reset()                    { *m = PaymentNotify{} }
func (m *PaymentNotify) String() string            { return proto.CompactTextString(m) }
func (*PaymentNotify) ProtoMessage()               {}
func (*PaymentNotify) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{67} }

func (m *PaymentNotify) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *PaymentNotify) GetMoney() *Money {
	if m != nil {
		return m.Money
	}
	return nil
}

type HeartBeat struct {
	Err      *Error           `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
	Payments []*PaymentNotify `protobuf:"bytes,2,rep,name=payments" json:"payments,omitempty"`
}

func (m *HeartBeat) Reset()                    { *m = HeartBeat{} }
func (m *HeartBeat) String() string            { return proto.CompactTextString(m) }
func (*HeartBeat) ProtoMessage()               {}
func (*HeartBeat) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{68} }

func (m *HeartBeat) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *HeartBeat) GetPayments() []*PaymentNotify {
	if m != nil {
		return m.Payments
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "fat.Empty")
	proto.RegisterType((*Error)(nil), "fat.Error")
	proto.RegisterType((*Ping)(nil), "fat.Ping")
	proto.RegisterType((*Pong)(nil), "fat.Pong")
	proto.RegisterType((*Resource)(nil), "fat.Resource")
	proto.RegisterType((*SkinWinData)(nil), "fat.SkinWinData")
	proto.RegisterType((*Activity)(nil), "fat.Activity")
	proto.RegisterType((*Profile)(nil), "fat.Profile")
	proto.RegisterType((*VersionUpdateAlert)(nil), "fat.VersionUpdateAlert")
	proto.RegisterType((*Announcement)(nil), "fat.Announcement")
	proto.RegisterType((*InviteCodeReq)(nil), "fat.InviteCodeReq")
	proto.RegisterType((*InviteCodeResp)(nil), "fat.InviteCodeResp")
	proto.RegisterType((*GuestLogin)(nil), "fat.GuestLogin")
	proto.RegisterType((*Tiers)(nil), "fat.Tiers")
	proto.RegisterType((*Money)(nil), "fat.Money")
	proto.RegisterType((*GuestLoginResp)(nil), "fat.GuestLoginResp")
	proto.RegisterType((*NickSet)(nil), "fat.NickSet")
	proto.RegisterType((*NickSetResp)(nil), "fat.NickSetResp")
	proto.RegisterType((*MatchBegin)(nil), "fat.MatchBegin")
	proto.RegisterType((*MatchBeginResp)(nil), "fat.MatchBeginResp")
	proto.RegisterType((*MatchQuery)(nil), "fat.MatchQuery")
	proto.RegisterType((*MatchQueryResp)(nil), "fat.MatchQueryResp")
	proto.RegisterType((*OpponentInfo)(nil), "fat.OpponentInfo")
	proto.RegisterType((*MatchMemberDetail)(nil), "fat.MatchMemberDetail")
	proto.RegisterType((*MatchReward)(nil), "fat.MatchReward")
	proto.RegisterType((*MatchTaskReward)(nil), "fat.MatchTaskReward")
	proto.RegisterType((*MatchRewardResp)(nil), "fat.MatchRewardResp")
	proto.RegisterType((*SigninViewResp)(nil), "fat.SigninViewResp")
	proto.RegisterType((*SigninForm)(nil), "fat.SigninForm")
	proto.RegisterType((*SigninResp)(nil), "fat.SigninResp")
	proto.RegisterType((*ZoneListResp)(nil), "fat.ZoneListResp")
	proto.RegisterType((*ZoneSet)(nil), "fat.ZoneSet")
	proto.RegisterType((*ZoneSetResp)(nil), "fat.ZoneSetResp")
	proto.RegisterType((*IAPVerifyForm)(nil), "fat.IAPVerifyForm")
	proto.RegisterType((*IAPVerifyResp)(nil), "fat.IAPVerifyResp")
	proto.RegisterType((*MatchRepeatState)(nil), "fat.MatchRepeatState")
	proto.RegisterType((*MatchRepeatStateResp)(nil), "fat.MatchRepeatStateResp")
	proto.RegisterType((*MatchEnd)(nil), "fat.MatchEnd")
	proto.RegisterType((*MatchEndResp)(nil), "fat.MatchEndResp")
	proto.RegisterType((*RankBegin)(nil), "fat.RankBegin")
	proto.RegisterType((*RankBeginResp)(nil), "fat.RankBeginResp")
	proto.RegisterType((*RankQuery)(nil), "fat.RankQuery")
	proto.RegisterType((*RankQueryResp)(nil), "fat.RankQueryResp")
	proto.RegisterType((*RankUser)(nil), "fat.RankUser")
	proto.RegisterType((*RankReward)(nil), "fat.RankReward")
	proto.RegisterType((*RankRewardResp)(nil), "fat.RankRewardResp")
	proto.RegisterType((*RankCancel)(nil), "fat.RankCancel")
	proto.RegisterType((*RankCancelResp)(nil), "fat.RankCancelResp")
	proto.RegisterType((*RankInfo)(nil), "fat.RankInfo")
	proto.RegisterType((*Reward)(nil), "fat.Reward")
	proto.RegisterType((*RankInfoResp)(nil), "fat.RankInfoResp")
	proto.RegisterType((*RankSelf)(nil), "fat.RankSelf")
	proto.RegisterType((*CombatGains)(nil), "fat.CombatGains")
	proto.RegisterType((*RankSelfResp)(nil), "fat.RankSelfResp")
	proto.RegisterType((*RankTiers)(nil), "fat.RankTiers")
	proto.RegisterType((*RankTiersResp)(nil), "fat.RankTiersResp")
	proto.RegisterType((*RankSeasonReward)(nil), "fat.RankSeasonReward")
	proto.RegisterType((*SeasonReward)(nil), "fat.SeasonReward")
	proto.RegisterType((*RankSeasonRewardResp)(nil), "fat.RankSeasonRewardResp")
	proto.RegisterType((*Shopping)(nil), "fat.Shopping")
	proto.RegisterType((*ShoppingResp)(nil), "fat.ShoppingResp")
	proto.RegisterType((*SelfMoney)(nil), "fat.SelfMoney")
	proto.RegisterType((*SelfMoneyResp)(nil), "fat.SelfMoneyResp")
	proto.RegisterType((*ADReward)(nil), "fat.ADReward")
	proto.RegisterType((*AdRewardResp)(nil), "fat.AdRewardResp")
	proto.RegisterType((*CDKey)(nil), "fat.CDKey")
	proto.RegisterType((*CDKeyExchangeResp)(nil), "fat.CDKeyExchangeResp")
	proto.RegisterType((*PaymentNotify)(nil), "fat.PaymentNotify")
	proto.RegisterType((*HeartBeat)(nil), "fat.HeartBeat")
}

func init() { proto.RegisterFile("fat.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 2092 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4f, 0x73, 0x1b, 0x49,
	0x15, 0x2f, 0x8d, 0x3c, 0x1a, 0xe9, 0x49, 0x32, 0xce, 0x60, 0x36, 0xda, 0xb0, 0xcb, 0x86, 0x0e,
	0x2c, 0xc9, 0x86, 0x72, 0xb2, 0x61, 0x29, 0x8e, 0x5b, 0xca, 0x1f, 0xb2, 0x5e, 0x36, 0x59, 0xef,
	0xd8, 0x09, 0x7f, 0x8a, 0x42, 0xd5, 0x9e, 0x69, 0xc9, 0xbd, 0xd2, 0xf4, 0x88, 0x99, 0x96, 0x1d,
	0x5d, 0xb8, 0x51, 0x1c, 0x38, 0x72, 0xe4, 0x4e, 0x15, 0x1f, 0x80, 0x4f, 0xc0, 0x99, 0xaf, 0xc0,
	0x67, 0xe0, 0x23, 0x50, 0xef, 0x75, 0xf7, 0xcc, 0xc8, 0xb6, 0x6c, 0x65, 0x0b, 0x6e, 0xfd, 0x5e,
	0xbf, 0x7e, 0xfd, 0xfa, 0xf7, 0xfe, 0xce, 0x40, 0x67, 0xcc, 0xf5, 0xde, 0x3c, 0xcf, 0x74, 0x16,
	0x36, 0xc7, 0x5c, 0xb3, 0x00, 0xfc, 0x67, 0xe9, 0x5c, 0x2f, 0xd9, 0x03, 0xf0, 0x9f, 0xe5, 0x79,
	0x96, 0x87, 0x21, 0x6c, 0xc5, 0x59, 0x22, 0x06, 0x8d, 0xdb, 0x8d, 0xbb, 0x7e, 0x44, 0x6b, 0xe4,
	0xf1, 0x7c, 0x52, 0x0c, 0xbc, 0xdb, 0xcd, 0xbb, 0x9d, 0x88, 0xd6, 0xec, 0x7b, 0xb0, 0x75, 0x20,
	0xd5, 0x24, 0x7c, 0x07, 0x5a, 0x05, 0x4f, 0xe7, 0x33, 0x73, 0x22, 0x88, 0x2c, 0xc5, 0x3e, 0x81,
	0xad, 0x83, 0x6c, 0xfd, 0x7e, 0xb8, 0x0b, 0x7e, 0x22, 0x66, 0x7c, 0x39, 0xf0, 0x88, 0x6d, 0x08,
	0xf6, 0x10, 0xda, 0x91, 0x28, 0xb2, 0x45, 0x1e, 0x8b, 0x70, 0x1b, 0x3c, 0x99, 0x58, 0x3b, 0x3c,
	0x99, 0xe0, 0x89, 0x53, 0x3e, 0x5b, 0x08, 0x3a, 0xe1, 0x47, 0x86, 0x60, 0x9f, 0x42, 0xf7, 0x70,
	0x2a, 0xd5, 0x2f, 0xa5, 0x7a, 0xca, 0x35, 0x0f, 0x6f, 0x42, 0x50, 0x4c, 0xa5, 0x1a, 0x95, 0x27,
	0x5b, 0x48, 0xee, 0x27, 0xb8, 0x71, 0x26, 0xd5, 0x48, 0x2d, 0x52, 0x7b, 0xbe, 0x75, 0x26, 0xd5,
	0xcb, 0x45, 0xca, 0x72, 0x68, 0x0f, 0x63, 0x2d, 0x4f, 0xa5, 0x5e, 0x86, 0xdf, 0x81, 0x16, 0x8f,
	0x75, 0x75, 0xd8, 0xe7, 0xb1, 0xde, 0x4f, 0xc2, 0x77, 0xa1, 0x2d, 0x54, 0x32, 0xd2, 0x32, 0x15,
	0x83, 0x26, 0x6d, 0x04, 0x42, 0x25, 0x47, 0x32, 0x15, 0xe1, 0x27, 0xd0, 0xa7, 0xfb, 0x50, 0x77,
	0xc2, 0x35, 0x27, 0x8c, 0xba, 0x8f, 0x76, 0xf6, 0x10, 0xe8, 0x9a, 0x61, 0x51, 0xb7, 0xa8, 0x08,
	0xf6, 0x4f, 0x0f, 0x82, 0x83, 0x3c, 0x1b, 0xcb, 0x19, 0x81, 0xab, 0x64, 0x3c, 0xa5, 0x1b, 0x3b,
	0x11, 0xad, 0xf1, 0xa9, 0x28, 0x6e, 0x10, 0xf7, 0x23, 0x43, 0x20, 0x94, 0x4a, 0x9c, 0x1d, 0x4b,
	0x63, 0x44, 0x3b, 0xb2, 0x54, 0xb8, 0x03, 0xcd, 0x33, 0xa9, 0x06, 0x5b, 0x64, 0x19, 0x2e, 0xc3,
	0xef, 0x42, 0x27, 0x17, 0x69, 0x76, 0x2a, 0x46, 0x3c, 0x19, 0xf8, 0x24, 0xdc, 0x36, 0x8c, 0x61,
	0x12, 0xde, 0x83, 0x36, 0xb7, 0x0f, 0x1e, 0x04, 0x64, 0x6d, 0x9f, 0xac, 0x75, 0x28, 0x44, 0xe5,
	0x36, 0xea, 0xe1, 0xc9, 0x28, 0x17, 0x67, 0x3c, 0x4f, 0x06, 0x6d, 0xa3, 0x87, 0x27, 0x11, 0xd1,
	0xe1, 0x03, 0xd8, 0xcd, 0x45, 0xca, 0xa5, 0x1a, 0x95, 0x32, 0xa3, 0x42, 0xc4, 0x83, 0x0e, 0xd9,
	0x71, 0xc3, 0xec, 0x0d, 0xad, 0xf4, 0xa1, 0x88, 0xc3, 0x1f, 0xc0, 0x36, 0xc2, 0x64, 0x45, 0xd1,
	0x13, 0x40, 0xa2, 0xbd, 0x33, 0xa9, 0x8c, 0xd4, 0xcb, 0x45, 0x1a, 0xde, 0x85, 0x9d, 0x9a, 0x54,
	0x9c, 0x2d, 0x94, 0x1e, 0x74, 0x49, 0x6e, 0xbb, 0x94, 0x7b, 0x82, 0x5c, 0xf6, 0x2b, 0x08, 0x5f,
	0x8b, 0xbc, 0x90, 0x99, 0x7a, 0x35, 0x4f, 0xb8, 0x16, 0xc3, 0x99, 0xc8, 0x35, 0x62, 0x37, 0xce,
	0xf2, 0xd8, 0xc4, 0x5b, 0x3b, 0x32, 0x44, 0x38, 0x80, 0xe0, 0xd4, 0xc8, 0x92, 0xfb, 0x3b, 0x91,
	0x23, 0x11, 0xff, 0x99, 0x54, 0x53, 0xc2, 0xb4, 0x13, 0xd1, 0x9a, 0x7d, 0x0e, 0xbd, 0xa1, 0x52,
	0xd9, 0x42, 0xc5, 0x22, 0x15, 0x6a, 0x9d, 0xce, 0x1d, 0x68, 0x2e, 0xf2, 0x99, 0xd5, 0x87, 0xcb,
	0x4b, 0x75, 0x3d, 0x84, 0xfe, 0xbe, 0x3a, 0x95, 0x5a, 0x3c, 0xc9, 0x12, 0x11, 0x89, 0xdf, 0x87,
	0x1f, 0x40, 0x57, 0x12, 0x63, 0x54, 0x26, 0x5a, 0x27, 0x02, 0x59, 0xca, 0xb0, 0x3d, 0xd8, 0xae,
	0x9f, 0x28, 0xe6, 0xe1, 0x7b, 0xd0, 0x14, 0x79, 0x4e, 0xa2, 0xdd, 0x47, 0x40, 0xde, 0xa2, 0x6c,
	0x8d, 0x90, 0xcd, 0xfe, 0xd5, 0x00, 0x78, 0xbe, 0x10, 0x85, 0xfe, 0x22, 0x9b, 0x48, 0x7a, 0x90,
	0x4c, 0x85, 0x74, 0x01, 0x85, 0x6b, 0xcc, 0xa5, 0xac, 0xb0, 0x81, 0xef, 0x65, 0x45, 0xf8, 0x43,
	0xd8, 0x8e, 0x67, 0x52, 0x28, 0x3d, 0x72, 0xa8, 0x18, 0x93, 0xfb, 0x86, 0x6b, 0x61, 0x45, 0xd4,
	0xe2, 0x13, 0xae, 0x94, 0x98, 0x51, 0x74, 0x75, 0x22, 0x47, 0x86, 0xb7, 0xa0, 0x3d, 0xe3, 0x6a,
	0xb2, 0xe0, 0x13, 0x41, 0x01, 0xe6, 0x47, 0x25, 0x8d, 0x0f, 0x1c, 0x2f, 0x8b, 0x64, 0x3a, 0xd2,
	0xd9, 0x54, 0xa8, 0x41, 0xcb, 0x3c, 0x90, 0x58, 0x47, 0xc8, 0x09, 0xdf, 0x07, 0x43, 0x8d, 0x16,
	0x0b, 0x99, 0x0c, 0x02, 0xda, 0xef, 0x10, 0xe7, 0xd5, 0x42, 0x26, 0x6c, 0x04, 0xfe, 0x91, 0x14,
	0x79, 0x81, 0xb0, 0x6b, 0x5c, 0xb8, 0x6c, 0x24, 0x02, 0x8d, 0x9a, 0xe4, 0x3c, 0x91, 0x6a, 0x62,
	0x1f, 0xe4, 0x48, 0x7c, 0x79, 0xa1, 0x79, 0x6e, 0x73, 0x94, 0xd6, 0xc8, 0xcb, 0xb9, 0x9a, 0xda,
	0xec, 0xa0, 0x35, 0xfb, 0x2d, 0xf8, 0x2f, 0x32, 0x25, 0x96, 0xb8, 0x39, 0xc9, 0x66, 0x2e, 0xdb,
	0x69, 0x8d, 0xea, 0x13, 0xc9, 0xd3, 0x4c, 0x25, 0x4e, 0xbd, 0x25, 0x11, 0xb4, 0xb1, 0xcc, 0x0b,
	0x3d, 0xca, 0x45, 0x7c, 0xc2, 0xf3, 0x89, 0xcb, 0xc3, 0x3e, 0x71, 0x23, 0xcb, 0x64, 0xff, 0xf6,
	0x60, 0xbb, 0x72, 0xc7, 0xf5, 0xfe, 0xa3, 0x38, 0x92, 0xe6, 0xb6, 0x7e, 0x84, 0x4b, 0x7a, 0x38,
	0x61, 0x87, 0x17, 0xf4, 0x22, 0x43, 0x84, 0x1f, 0x42, 0x30, 0x37, 0x45, 0x83, 0x5e, 0xd3, 0x7d,
	0xd4, 0x23, 0x4d, 0xb6, 0x90, 0x44, 0x6e, 0x33, 0x7c, 0x00, 0xad, 0x05, 0x25, 0x04, 0x79, 0xa6,
	0xfb, 0xe8, 0x26, 0x89, 0x5d, 0x4c, 0x95, 0xc8, 0x8a, 0x85, 0x3f, 0x83, 0x3e, 0xaf, 0x85, 0x7b,
	0x31, 0x68, 0x51, 0x59, 0xb8, 0x61, 0xca, 0x42, 0x6d, 0x27, 0x5a, 0x95, 0x0b, 0x6f, 0x3b, 0x07,
	0x05, 0xb5, 0x97, 0x91, 0xef, 0x9c, 0xb3, 0x6e, 0x83, 0x9f, 0x22, 0xd4, 0x54, 0x3d, 0x9c, 0x04,
	0x81, 0x1f, 0x99, 0x8d, 0xf0, 0x21, 0xec, 0x2a, 0x21, 0x92, 0x11, 0x25, 0x00, 0xd7, 0x32, 0x53,
	0x26, 0x2f, 0x3a, 0x84, 0x6d, 0x88, 0x7b, 0xfb, 0xe5, 0x16, 0xe5, 0xc7, 0xc7, 0x10, 0xbc, 0x94,
	0xf1, 0xf4, 0x50, 0xe8, 0x4b, 0x8b, 0x27, 0x26, 0x21, 0xb7, 0xc1, 0xd1, 0x8f, 0x68, 0xcd, 0xee,
	0x43, 0xd7, 0x1e, 0xd9, 0x20, 0x9f, 0xbe, 0x06, 0x78, 0xc1, 0x75, 0x7c, 0xf2, 0x58, 0xd8, 0x74,
	0xc2, 0xf2, 0xeb, 0x62, 0x04, 0xd7, 0xe8, 0xb1, 0x19, 0x77, 0xe1, 0x87, 0x4b, 0xaa, 0xb8, 0x59,
	0x96, 0x1a, 0xd3, 0x4d, 0xfc, 0xb5, 0x91, 0x81, 0x06, 0x63, 0xff, 0x90, 0xc5, 0x88, 0x4f, 0xb8,
	0xad, 0xd2, 0xed, 0x28, 0x90, 0xc5, 0x10, 0x49, 0x76, 0x08, 0xdb, 0xd5, 0x5d, 0x75, 0xdb, 0xbc,
	0xcb, 0x63, 0xe5, 0x0e, 0xf4, 0xc7, 0xb9, 0xc4, 0x6e, 0x54, 0x68, 0xae, 0x17, 0x2e, 0x35, 0x7a,
	0x86, 0x79, 0x48, 0x3c, 0xd6, 0xb3, 0x0f, 0xf8, 0x6a, 0x21, 0xf2, 0x25, 0xfb, 0x4f, 0xc3, 0xde,
	0x41, 0x24, 0xdd, 0x81, 0x4d, 0xb9, 0x7e, 0xdc, 0x52, 0x98, 0xb9, 0xe9, 0x72, 0x34, 0xcf, 0x0a,
	0xa9, 0x5d, 0xa5, 0xf4, 0x23, 0x48, 0x97, 0x07, 0x96, 0x83, 0x5d, 0x94, 0x9e, 0x29, 0x13, 0x7a,
	0x64, 0x3f, 0x6a, 0x21, 0xb9, 0x9f, 0x90, 0x23, 0x78, 0x2a, 0x6c, 0x99, 0xa0, 0x75, 0xf8, 0x7d,
	0xe8, 0x65, 0xf3, 0x79, 0xa6, 0xb0, 0xcc, 0x60, 0x80, 0xfb, 0x74, 0xa2, 0xeb, 0x78, 0xaf, 0x64,
	0xe2, 0x5a, 0x57, 0xab, 0x6a, 0x5d, 0x0e, 0xee, 0xa0, 0x06, 0xf7, 0x2d, 0x68, 0x63, 0x2f, 0x79,
	0x2d, 0x63, 0x41, 0x71, 0xe4, 0x47, 0x25, 0x1d, 0x7e, 0x1b, 0xfc, 0xd3, 0x62, 0xc4, 0xa5, 0x6d,
	0x3b, 0x5b, 0xa7, 0xc5, 0x50, 0xb2, 0x29, 0xf4, 0xbe, 0xb4, 0xb7, 0xec, 0xab, 0x71, 0x56, 0x5a,
	0xd7, 0xb8, 0xc2, 0x3a, 0x6f, 0xad, 0x75, 0xcd, 0x8b, 0xd6, 0x6d, 0x55, 0xd6, 0xb1, 0x9f, 0xc2,
	0x0d, 0x82, 0xf7, 0x85, 0x48, 0x8f, 0x45, 0xfe, 0x54, 0x68, 0x2e, 0x67, 0x2e, 0xa7, 0x1b, 0x55,
	0x4e, 0x6f, 0x83, 0x77, 0x32, 0x77, 0x25, 0xf8, 0x64, 0xce, 0xfe, 0xd8, 0x80, 0x2e, 0x9d, 0xb3,
	0xed, 0xb4, 0x06, 0x6d, 0x63, 0x05, 0xda, 0x77, 0xa0, 0x95, 0x8b, 0x62, 0x31, 0xd3, 0x6e, 0x70,
	0x31, 0x54, 0xf8, 0x10, 0x82, 0x84, 0x2e, 0x2b, 0x06, 0x4d, 0xca, 0xd7, 0x77, 0x4c, 0x72, 0x9d,
	0xb7, 0x25, 0x72, 0x62, 0x15, 0x56, 0x5b, 0x35, 0xac, 0x5e, 0xc2, 0xb7, 0xe8, 0xc8, 0x11, 0x2f,
	0xa6, 0xd6, 0x94, 0xf3, 0x93, 0xd7, 0x7d, 0x1c, 0x27, 0xcc, 0x54, 0x56, 0xd8, 0x01, 0xc7, 0x8c,
	0x0c, 0x6e, 0x56, 0x8b, 0xaa, 0x7d, 0xf6, 0x17, 0xcf, 0x2a, 0x34, 0xca, 0x36, 0xab, 0x7f, 0x08,
	0xb3, 0x57, 0xc1, 0xfc, 0x11, 0xf8, 0x9a, 0x17, 0x53, 0xf7, 0xb0, 0xdd, 0xea, 0x61, 0x95, 0x95,
	0x91, 0x11, 0xb9, 0x38, 0x81, 0x99, 0xda, 0x78, 0xf5, 0x04, 0x56, 0xd5, 0x25, 0x7f, 0x5d, 0x5d,
	0x62, 0xb0, 0x32, 0x97, 0xd8, 0x18, 0xbd, 0x7e, 0x56, 0x09, 0x2e, 0x9d, 0x55, 0x0e, 0x60, 0xfb,
	0x50, 0x4e, 0x14, 0x06, 0xad, 0x38, 0xdb, 0x00, 0x13, 0xe3, 0x02, 0xaf, 0x74, 0xc1, 0x0e, 0x34,
	0x71, 0xb6, 0xb2, 0xa1, 0x58, 0x88, 0x98, 0xbd, 0x07, 0x60, 0x34, 0xfe, 0x3c, 0xcb, 0xd3, 0xf3,
	0x2e, 0x63, 0x7f, 0x6d, 0xb8, 0xed, 0x6f, 0x70, 0xd9, 0x4d, 0x08, 0x94, 0x78, 0xa3, 0x5d, 0x96,
	0xfb, 0x38, 0x69, 0xbe, 0xb1, 0x83, 0x30, 0x6d, 0xa0, 0x29, 0x26, 0x86, 0x48, 0x10, 0x87, 0xbb,
	0x95, 0x18, 0xf1, 0xaf, 0x89, 0x91, 0x23, 0xe8, 0xfd, 0x26, 0x53, 0xe2, 0x0b, 0x59, 0xe8, 0xcd,
	0xe2, 0x43, 0x26, 0xee, 0xeb, 0x03, 0x97, 0xd8, 0x1f, 0x79, 0x92, 0xe4, 0x26, 0x3e, 0x3a, 0x91,
	0x21, 0xd8, 0xbb, 0x10, 0xa0, 0x56, 0xec, 0x0b, 0x15, 0x1c, 0x1d, 0x82, 0xe3, 0x3e, 0x74, 0xed,
	0xd6, 0x06, 0xf5, 0xff, 0x1e, 0xf4, 0xf7, 0x87, 0x07, 0xaf, 0x45, 0x2e, 0xc7, 0x4b, 0x02, 0x77,
	0x00, 0x41, 0x2e, 0x62, 0x21, 0xe7, 0xda, 0xaa, 0x74, 0x24, 0xfb, 0x7b, 0xa3, 0x26, 0xfb, 0x56,
	0x48, 0xf7, 0x2f, 0x66, 0x56, 0xf3, 0x6a, 0xd4, 0x56, 0xa7, 0xfa, 0xad, 0x73, 0x53, 0xfd, 0xb5,
	0x01, 0xcd, 0x1e, 0xc0, 0x8e, 0xcd, 0xcb, 0xb9, 0xe0, 0x1a, 0x5b, 0x85, 0x58, 0x6d, 0x5b, 0xa6,
	0xec, 0x94, 0x6d, 0x8b, 0xed, 0xc1, 0xee, 0xf9, 0x03, 0x57, 0x75, 0x0f, 0xf6, 0x23, 0x68, 0x93,
	0xfc, 0x33, 0x95, 0x5c, 0xad, 0xf8, 0xc7, 0xd0, 0x73, 0x82, 0x1b, 0xb8, 0xe3, 0x03, 0xe8, 0x44,
	0x5c, 0x4d, 0xd7, 0x76, 0x63, 0x36, 0x84, 0x7e, 0x29, 0x70, 0x65, 0x7b, 0x1b, 0x40, 0x50, 0x2c,
	0x8a, 0xb9, 0xa8, 0x46, 0x3b, 0x4b, 0xb2, 0xae, 0xb9, 0xc3, 0x34, 0xcc, 0x7f, 0x34, 0x8c, 0xc2,
	0xeb, 0xfb, 0x65, 0xad, 0x66, 0x7b, 0x2b, 0x35, 0x1b, 0x1b, 0x29, 0x7e, 0x19, 0x09, 0x35, 0x91,
	0xca, 0xcd, 0x89, 0x80, 0xac, 0x67, 0xc4, 0xa1, 0x21, 0x45, 0x8c, 0xb5, 0x75, 0x23, 0xad, 0xc3,
	0x3b, 0xe0, 0xe7, 0xf2, 0x94, 0xcf, 0xac, 0x0b, 0x6d, 0x20, 0x70, 0x35, 0x7d, 0x55, 0x88, 0x3c,
	0x32, 0x7b, 0x98, 0x82, 0x74, 0x25, 0x76, 0x97, 0x16, 0xdd, 0x49, 0x26, 0xbc, 0x92, 0x09, 0x1b,
	0x43, 0xdb, 0x49, 0x57, 0x93, 0x59, 0x63, 0xdd, 0x64, 0x76, 0x71, 0xea, 0x74, 0xc3, 0x54, 0x73,
	0x75, 0x98, 0xba, 0xd0, 0xf0, 0x3e, 0x05, 0xc0, 0x7b, 0x6c, 0xb3, 0xa8, 0x1b, 0xd4, 0x58, 0x31,
	0xe8, 0x5c, 0xe7, 0x6a, 0xba, 0xce, 0xc5, 0xfe, 0xe6, 0xc1, 0x76, 0xa5, 0x81, 0x10, 0xc6, 0x0f,
	0x94, 0xa9, 0xfd, 0xbc, 0xf2, 0xb2, 0x69, 0x65, 0xbf, 0xb7, 0xce, 0xfe, 0xff, 0x7f, 0x8f, 0xb0,
	0x7d, 0xc9, 0xaf, 0xfa, 0x52, 0x99, 0x64, 0xad, 0x4d, 0xbb, 0x46, 0xb0, 0x61, 0xd7, 0x68, 0x5f,
	0xda, 0x35, 0x7a, 0x06, 0xe9, 0x27, 0x5c, 0xc5, 0x62, 0xc6, 0x6e, 0x1b, 0xd4, 0x0c, 0x75, 0x19,
	0x6a, 0x0c, 0x4c, 0x04, 0xe0, 0xcc, 0xc3, 0x3e, 0x82, 0xd6, 0x9a, 0x76, 0xbe, 0x03, 0xcd, 0xea,
	0x37, 0x08, 0x2e, 0xd9, 0x1f, 0xa0, 0xe7, 0xce, 0x5d, 0x19, 0xef, 0xc8, 0x17, 0xbc, 0x28, 0x47,
	0x43, 0x4b, 0x5d, 0xf5, 0x83, 0xe4, 0x0e, 0xc6, 0x00, 0xfd, 0x3f, 0xd8, 0x22, 0x3f, 0x75, 0x6d,
	0x79, 0x23, 0xf7, 0xd8, 0x2d, 0x67, 0xf7, 0xa1, 0x98, 0x8d, 0xd9, 0x73, 0xe8, 0x3e, 0xc9, 0xd2,
	0x63, 0xae, 0x9f, 0x73, 0xa9, 0x0a, 0xe7, 0x84, 0xc6, 0xca, 0x0c, 0x36, 0xcb, 0x0a, 0xf7, 0x1b,
	0x88, 0xd6, 0xc8, 0x4b, 0x72, 0x7e, 0xe6, 0xbe, 0xfc, 0x70, 0xcd, 0x4e, 0xcc, 0xa3, 0x50, 0xe9,
	0x37, 0x0c, 0xb1, 0x0f, 0xc1, 0xc7, 0x21, 0xbd, 0x20, 0xb5, 0x2e, 0x5c, 0x6a, 0xc6, 0x45, 0x66,
	0xdb, 0x55, 0x0f, 0x3a, 0xcb, 0xf6, 0x4c, 0xf1, 0x30, 0x8a, 0xf0, 0xde, 0xf7, 0x01, 0x34, 0x3f,
	0x9e, 0x89, 0xd1, 0xd7, 0x08, 0x9c, 0x69, 0x20, 0x1d, 0xe2, 0x7c, 0x5e, 0x64, 0x8a, 0x85, 0xb0,
	0x63, 0xcc, 0x44, 0x24, 0x0d, 0x2e, 0x2c, 0x85, 0x5e, 0x9d, 0xde, 0x20, 0x9b, 0x2b, 0x98, 0xbd,
	0xb5, 0x30, 0xd7, 0xdc, 0xd7, 0xac, 0xbb, 0x8f, 0x7d, 0x05, 0xbb, 0xe7, 0x4d, 0xb8, 0x14, 0xb1,
	0x7b, 0xe5, 0x25, 0xcd, 0xda, 0x07, 0xe2, 0xca, 0x31, 0xe7, 0xd1, 0x5b, 0xd0, 0x3e, 0x3c, 0xc9,
	0xe6, 0x73, 0xfc, 0x2c, 0x3f, 0x3f, 0x9b, 0x7c, 0x09, 0x3d, 0xb7, 0xe7, 0x00, 0x12, 0x58, 0xee,
	0x47, 0xb5, 0x1f, 0x8f, 0x1d, 0xe2, 0xd0, 0xd7, 0x53, 0x99, 0x74, 0xde, 0xba, 0xce, 0xd6, 0x85,
	0x0e, 0x7a, 0x99, 0x78, 0xec, 0x63, 0xe8, 0x97, 0x04, 0xa9, 0x2f, 0xcf, 0x37, 0xd6, 0x9d, 0x07,
	0x68, 0x0f, 0x9f, 0x5a, 0xe8, 0xff, 0xd4, 0x80, 0x9e, 0xfb, 0x69, 0xf5, 0x3f, 0xb1, 0x6e, 0xf5,
	0x27, 0x5a, 0xf3, 0xdc, 0x4f, 0x34, 0xac, 0x9e, 0xe6, 0x27, 0x9a, 0x76, 0x13, 0x95, 0xa1, 0x8f,
	0xd8, 0x4d, 0xf0, 0x9f, 0x3c, 0xfd, 0x85, 0x58, 0x5e, 0x18, 0x66, 0x7e, 0x07, 0x37, 0x68, 0xe3,
	0xd9, 0x9b, 0xf8, 0x84, 0xab, 0xc9, 0x06, 0xbf, 0x88, 0xde, 0x6e, 0x82, 0xff, 0x73, 0x03, 0xfa,
	0x07, 0x7c, 0x89, 0x9f, 0xf8, 0x2f, 0x33, 0x2d, 0xc7, 0x17, 0x2c, 0x78, 0x2b, 0x75, 0xab, 0x63,
	0x4b, 0x73, 0xdd, 0xd8, 0xb2, 0xb5, 0xce, 0x39, 0xbf, 0x86, 0xce, 0x67, 0x82, 0xe7, 0xfa, 0xb1,
	0xe0, 0xfa, 0x9a, 0x57, 0xee, 0x41, 0x7b, 0x6e, 0xec, 0x76, 0x56, 0x85, 0xe6, 0x0f, 0x49, 0xfd,
	0x31, 0x51, 0x29, 0xf3, 0xd8, 0xfb, 0xac, 0x79, 0xdc, 0xa2, 0xbf, 0xe1, 0x3f, 0xf9, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xff, 0x8b, 0xa8, 0x42, 0x1a, 0x17, 0x00, 0x00,
}
